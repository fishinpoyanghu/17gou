<?php
 function C($name=null, $value=null) { static $_config = array(); if(empty($name)) return $_config; if (is_string($name)) { if (!strpos($name,'.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name])? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.',$name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if(is_array($name)) return $_config = array_merge($_config,array_change_key_case($name)); return null;} function mysql_start_transaction() { $db_cfg = load_db_cfg('autoid', 'res', ''); $db_op = DbOp::getInstance($db_cfg); $db_op->execute("SET AUTOCOMMIT=0"); $db_op->execute("START TRANSACTION"); } function mysql_end_transaction() { $db_cfg = load_db_cfg('autoid', 'res', ''); $db_op = DbOp::getInstance($db_cfg); $db_op->execute("COMMIT"); } function get_auto_id($k=0, $count=1) { if($k==808){ $count = mt_rand(1,20); } if (!is_numeric($k)) { die('get_auto_id key invalid, integer required.'); } $k = intval($k); $count = intval($count); if (($k < 1) || ($k > 65535)) { die('get_auto_id key invalid, 0<$k<65536 required.'); } $db_cfg = load_db_cfg('autoid', 'idcenter', ''); $db_op = DbOp::getInstance($db_cfg); $ret = $db_op->execute("update ".$db_cfg['tbl']." set id=last_insert_id(id+{$count}) where k={$k}"); if (!$ret) { $db_op->execute("insert into ".$db_cfg['tbl']." (k,id) values ({$k},0)"); $ret = $db_op->execute("update ".$db_cfg['tbl']." set id=last_insert_id(id+{$count}) where k={$k}"); } return $db_op->getInsertId(); } function get_app_name() { return (isset($GLOBALS['core_is_api']) && $GLOBALS['core_is_api']) ? $GLOBALS['core_app_api_cfg']['app_name'] : $GLOBALS['core_app_cfg']['app_name']; } function get_app_root() { return (isset($GLOBALS['core_is_api']) && $GLOBALS['core_is_api']) ? $GLOBALS['core_app_api_cfg']['app_root'] : $GLOBALS['core_app_cfg']['app_root']; } function get_app_data_root() { return (isset($GLOBALS['core_is_api']) && $GLOBALS['core_is_api']) ? $GLOBALS['core_app_api_cfg']['data_root'] : $GLOBALS['core_app_cfg']['data_root']; } function load_db_cfg($cfg_name, $tbl_alias, $hash_key='', $mode='rw') { $key = 'core_db_'.$cfg_name; $db_cfg = C($key); if (!is_array($db_cfg)) { $filename = CONFIG_PATH.'db/'.$cfg_name.'.db.php'; if (!is_file($filename)) { halt('config file:'.$filename.' is not found'); } $db_cfg = include $filename; C(array($key=>$db_cfg)); if (!is_array($db_cfg)) { halt('return value is not an array in config file:'.$filename); } } if (!isset($db_cfg['tbl_list'][$tbl_alias])) { halt('table alias is not defined in config file:'.$filename); } $split = $db_cfg['tbl_list'][$tbl_alias]['split']; $ret = array( 'host' => $db_cfg['w_server'][0], 'user' => $db_cfg['w_server'][1], 'pass' => $db_cfg['w_server'][2], 'tbl' => '', ); if (!(is_array($db_cfg['r_server']) && (count($db_cfg['r_server']) > 0))) { $db_cfg['r_server'] = array($db_cfg['w_server']); } if ($mode == 'r') { $r_rand = mt_rand(0, count($db_cfg['r_server'])-1); $ret['host'] = $db_cfg['r_server'][$r_rand][0]; $ret['user'] = $db_cfg['r_server'][$r_rand][1]; $ret['pass'] = $db_cfg['r_server'][$r_rand][2]; } if (is_array($split)) { $m = bcmod($hash_key, $split[0]); $n = bcmod(floor(bcdiv($hash_key, $split[0])), $split[1]); $ret['tbl'] = $db_cfg['db'].'_'.$m.'.'.$db_cfg['tbl_list'][$tbl_alias]['tbl'].'_'.$n; } elseif ($split == 'no') { $ret['tbl'] = $db_cfg['db'].'_0.'.$db_cfg['tbl_list'][$tbl_alias]['tbl']; } elseif ($split == 'off') { $ret['tbl'] = $db_cfg['db'].'.'.$db_cfg['tbl_list'][$tbl_alias]['tbl']; } elseif ($split == 'define') { halt('[define] split mode has not beed implemented.'); } return $ret; } function sess_id($user_id='', $ip='') { if (empty($user_id)) $user_id = 'r'.mt_rand(); if (empty($ip)) $ip = get_ip(); $s1 = substr((md5($user_id . $ip . time() . microtime(true) . mt_rand())), 8, 25); $s2 = substr(md5($s1), 8, 4); return $user_id.'-'.$s1.$s2; } function last_sql($sql_str='') { static $sql=''; if ($sql_str) { $sql = $sql_str; return true; } return $sql; } function date_friendly($timestamp) { if (!is_numeric($timestamp)) return '-'; if ($timestamp < 1) return '-'; $curr_stamp = time(); $time = $curr_stamp - $timestamp; $today = strtotime(date('Y-m-d', $curr_stamp)); $this_year = date('Y', $curr_stamp).'-1-1 00:00:00'; $this_year_stamp = strtotime($this_year); $ret = ''; if ($time <= 0) $time = 1; if ($time < 1) $ret = '刚刚'; elseif ($time < 60) $ret = $time . '秒前'; elseif ($time < 3600) $ret = floor($time/60).'分钟前'; elseif ($timestamp > $today) $ret = date('H时i分', $timestamp); elseif (($timestamp <= $today) && ($timestamp > ($today - 86400))) $ret = '昨天'; elseif (($timestamp <= ($today - 86400)) && ($timestamp > ($today - 172800))) $ret = '前天'; elseif (($timestamp <= ($today - 172800)) && ($timestamp > $this_year_stamp)) $ret = date('m月d日', $timestamp); else { $ret = date('Y年m月d日', $timestamp); } return $ret; } function tolower($str) { return strtr($str, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'); } function toupper($str) { return strtr($str, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); } function strlen_utf8($str, $unit=2) { $len = 0; $result = substr_utf8($str, 0, strlen($str), true); $count = count($result); for ($i = 0; $i < $count; $i++) { $len += ord($result[$i]) > 127 ? $unit : 1; } return $len; } function substr_utf8($str, $start=0, $length=-1, $return_ary=false) { $len = strlen($str);if ($length == -1) $length = $len; $r = array(); $n = 0; $m = 0; for($i = 0; $i < $len; $i++) { $x = substr($str, $i, 1); $a = base_convert(ord($x), 10, 2); $a = substr('00000000'.$a, -8); if ($n < $start) { if (substr($a, 0, 1) == 0) { }elseif (substr($a, 0, 3) == 110) { $i += 1; }elseif (substr($a, 0, 4) == 1110) { $i += 2; } $n++; }else { if (substr($a, 0, 1) == 0) { $r[] = substr($str, $i, 1); }elseif (substr($a, 0, 3) == 110) { $r[] = substr($str, $i, 2); $i += 1; }elseif (substr($a, 0, 4) == 1110) { $r[] = substr($str, $i, 3); $i += 2; }else { $r[] = ''; } if (++$m >= $length) { break; } } } return $return_ary ? $r : implode('',$r); } function truncate_utf8($str, $len, $etc='...') { $ary = substr_utf8($str, 0, strlen($str), true); if ($len >= count($ary)) return $str; $ret = ''; for ($i=0; $i < ($len-1); $i++) { $ret .= $ary[$i]; } return $ret.$etc; } function is_utf8($str) { return preg_match('%^(?:
		 [\x09\x0A\x0D\x20-\x7E]            # ASCII
	   | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
	   |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
	   | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
	   |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
	   |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
	   | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
	   |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
   )*$%xs', $str); } function safe_db_data($data) { if (is_array($data) || is_object($data)) { foreach ($data as &$v) { $v = safe_db_data($v); } } else { return mysql_escape_string($data); } return $data; } function parse_name($name, $type=1) { if ($type == 1) { return ucfirst(preg_replace("/_([a-zA-Z0-9])/e", "strtoupper('\\1')", $name)); } else if ($type == 2) { return (preg_replace("/_([a-zA-Z0-9])/e", "strtoupper('\\1')", $name)); } else { $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } function get_ip($ip2long=0) { global $_SERVER; $ip = ''; if (isset($_GET['clientip'])) { $ip = $_GET['clientip']; } elseif (getenv('HTTP_CLIENT_IP')) { $ip = getenv('HTTP_CLIENT_IP'); } elseif (getenv('HTTP_X_FORWARDED_FOR')) { $ip = getenv('HTTP_X_FORWARDED_FOR'); } elseif (getenv('REMOTE_ADDR')) { $ip = getenv('REMOTE_ADDR'); } else { $ip = $_SERVER['REMOTE_ADDR']; } return $ip2long ? ip2long($ip) : $ip; } function top_redirect($url='') { if (empty($url)) $url = C('SITE_DOMAIN'); echo '<script type="text/javascript">top.window.location.href="'.$url.'"</script>'; exit; } function redirect($url,$msg='',$time=0) { $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; $msg = '<div style="font-size:12px;color:#fff;background:#f90;line-height:24px;width:250px;text-align:center;">'.$msg.'</div>'; if (!headers_sent()) { if(0===$time) { header("Location: ".$url); }else { header('Content-type: text/html; charset=utf-8'); header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) $str .= $msg; exit($str); } } function debug() { static $debug_off = true; C('APP_DEBUG', true); if ($debug_off) { register_shutdown_function(array('App', 'showTrace')); $debug_off = false; } } function dump($var) { if (!headers_sent()) header('Content-type: text/html; charset=utf-8'); $label = ''; if(!extension_loaded('xdebug')) { ob_start(); var_dump($var); $output = ob_get_clean(); $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre>'. $label. htmlspecialchars($output, ENT_QUOTES). '</pre>'; echo $output; return ; } else { ini_set('xdebug.var_display_max_children', 1024 ); ini_set('xdebug.var_display_max_data', 10240 ); ini_set('xdebug.var_display_max_depth', 10); if (is_array($var)) { var_dump($var); } else { echo $var.'<br />'; } return ; } } function get_instance_of($name, $method='',$args=array()) { static $_instance = array(); $identify = empty($args)?$name.$method:$name.$method.to_guid_string($args); if (!isset($_instance[$identify])) { if(class_exists($name)){ $o = new $name(); if($method && method_exists($o,$method)){ if(!empty($args)) { call_user_func_array(array(&$o, $method), $args); }else { $o->$method(); } } $_instance[$identify] = $o; } else halt('实例化一个不存在的类！:'.$name); } return $_instance[$identify]; } function throw_exception($msg, $type='AppException', $code=0) { if(IS_CLI) exit($msg); if(class_exists($type, false)) throw new $type($msg, $code, true); else halt($msg); } function halt($error, $type=1) { if(IS_CLI) exit($error); if (in_array(RUN_MOD, array('test2', 'deploy'))) { header('Location:'.C('INDEX_URL').'/unfound'); exit; } $e = array(); if (C('APP_DEBUG')) { if(!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['class'] = $trace[0]['class']; $e['function'] = $trace[0]['function']; $e['line'] = $trace[0]['line']; $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } $e['trace'] = $traceInfo; } else { $e = $error; } include C('APP_EXCEPTION_FILE'); } else { $error_page = C('ERROR_PAGE'); if(!empty($error_page)) { redirect($error_page); } else { if(C('SHOW_ERROR_MSG')) $e['message'] = is_array($error)?$error['message']:$error; else $e['message'] = C('ERROR_MESSAGE'); include C('APP_EXCEPTION_FILE'); } } exit; } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); }elseif(is_resource($mix)){ $mix = get_resource_type($mix).strval($mix); }else{ $mix = serialize($mix); } return md5($mix); } function is_email($email) { if (!eregi("^([a-z0-9_.]|\\-|\\.)+@(([a-z0-9_]|\\-)+\\.)+[a-z]{2,4}$", $email)) return false; return true; } function is_mobile($mobile) { if (preg_match('/^1[345789][0-9]{9,9}$/', $mobile)) return true; return false; } function is_phone($var) {return _regex($var, 'phone'); } function is_qq($var) { $regex1 = '/^[1-9]\d{4,15}$/'; $regex2 = '/^[0-9a-zA-Z_\-\.]+@qq\.com$/'; if (preg_match($regex1, $var)) return true; if (preg_match($regex2, $var)) return true; return false; } function _regex($value,$rule) { $validate = array( 'require'=> '/.+/', 'email' => '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'url' => '/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/', 'currency' => '/^\d+(\.\d+)?$/', 'number' => '/\d+$/', 'zip' => '/^[1-9]\d{5}$/', 'integer' => '/^[-\+]?\d+$/', 'double' => '/^[-\+]?\d+(\.\d+)?$/', 'english' => '/^[A-Za-z]+$/', 'phone' => '/^1(3|5|8)\d{9}$/', 'qq' => '/^[1-9]\d{4,15}(@qq\.com)?$/', ); if(!isset($validate[strtolower($rule)])) return false; $rule = $validate[strtolower($rule)]; return preg_match($rule,$value)===1; } function compile($filename,$runtime=false) { $content = file_get_contents($filename); $content = trim($content); $content = substr(trim($content),5); if('?>' == substr($content,-2)) $content = substr($content,0,-2); return $content; } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count ($tokens); $i < $j; $i++) { if (is_string ($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function nocache_headers() { header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); header("Cache-Control: no-cache, must-revalidate"); header("Pragma: no-cache"); } function division($divisor, $dividend, $point = 2, $mul = 0){ $result = 0; $dividend = floatval($dividend); $divisor = floatval($divisor); if (empty($dividend)){ if($mul == 0){ return sprintf("%.{$point}f",0.00000); }else{ return sprintf("%.{$point}f",1.0000000 * $mul); } } if(empty($divisor)){ return sprintf("%.{$point}f",0.00000); } $result = sprintf("%.{$point}f",$divisor/$dividend); return $result; } function printPre($data){ echo "<pre>"; print_r($data); echo "</pre>"; } define('CLIENT_MULTI_RESULTS', 131072); class DbOp { private $total; private $query_res; private $conn; private $begin_time; public $debug = false; private $db_info = array(); private $conn_list = array(); private $sql = ''; private $link_id = null; private $query_id = null; private $num_rows = 0; private $error = ''; public function __construct() { } public static function getInstance($db_cfg) { static $instance_list = array(); $link_key = md5($db_cfg['host'].'-'.$db_cfg['user']); if (!isset($instance_list[$link_key])) { $instance_list[$link_key] = new DbOp(); $instance_list[$link_key]->initDb($db_cfg, $link_key); } return $instance_list[$link_key]; } public function initDb($db_cfg, $link_key) { $this->db_info = $db_cfg; $this->db_info['link_key'] = $link_key; $this->sql = ''; if (C('APP_DEBUG')) $this->debug = true; } private function initConnect() { $this->link_id = $this->connect(); } public function connect() { if (!isset($this->conn_list[$this->db_info['link_key']])) { if (IS_CLI) { $this->conn_list[$this->db_info['link_key']] = mysql_pconnect($this->db_info['host'], $this->db_info['user'], $this->db_info['pass']); } else { $this->conn_list[$this->db_info['link_key']] = mysql_connect($this->db_info['host'], $this->db_info['user'], $this->db_info['pass'], true, CLIENT_MULTI_RESULTS); } if (!$this->conn_list[$this->db_info['link_key']]) { throw_exception(mysql_error()); } mysql_query("SET NAMES 'utf8'", $this->conn_list[$this->db_info['link_key']]); } return $this->conn_list[$this->db_info['link_key']]; } public function free() { @mysql_free_result($this->query_id); $this->query_id = 0; } private function query($sql) { if (empty($sql)) { $this->error('查询的SQL语句不能为空'); return false; } $this->sql = $sql; last_sql($this->sql); $this->initConnect(); if (!$this->link_id) return false; if ($this->query_id) { $this->free(); } $this->Q(1); $this->query_id = mysql_query($this->sql, $this->link_id); $this->debug(); if (false === $this->query_id) { $this->error(); return false; } else { $this->num_rows = mysql_num_rows($this->query_id); return $this->mysqlFetchAll(); } } public function execute($sql) { if (empty($sql)) { $this->error('执行的SQL语句不能为空'); return false; } $this->sql = $sql; last_sql($this->sql); $this->initConnect(true); if (!$this->link_id) return false; if ($this->query_id) { $this->free(); } $this->W(1); $result = mysql_query($this->sql, $this->link_id); $this->debug(); if (false === $result) { $this->error(); return false; } else { $this->num_rows = mysql_affected_rows($this->link_id); return $this->num_rows; } } public function queryList($sql) { return $this->query($sql); } public function queryRow($sql) { $rows = $this->query($sql); if (is_array($rows)) { if (count($rows) > 0) { return array_shift($rows); } else { return array(); } } return false; } public function queryCount($sql) { $rows = $this->query($sql); if (is_array($rows) && (count($rows) > 0)) { return array_shift($rows[0]); } else { return false; } } public function getInsertId() { return mysql_insert_id($this->link_id); } public function getLastSql() { return $this->sql; } public function getLastError() { return $this->error; } private function mysqlFetchAll() { $ret = array(); if($this->num_rows >0) { while($row = mysql_fetch_assoc($this->query_id)){ $ret[] = $row; } mysql_data_seek($this->query_id, 0); } return $ret; } private function debug() { if ( $this->debug ) { $runtime = number_format(microtime(true) - $this->begin_time, 6); Log::record(" RunTime:".$runtime."s SQL = ".$this->sql,Log::SQL); } } public function Q($times='') { static $_times = 0; if(empty($times)) { return $_times; } else{ $_times++; $this->begin_time = microtime(true); } } public function W($times='') { static $_times = 0; if(empty($times)) { return $_times; } else{ $_times++; $this->begin_time = microtime(true); } } public function close() { if (!empty($this->query_id)) @mysql_free_result($this->query_id); if ($this->link_id && !mysql_close($this->link_id)){ throw_exception($this->error()); } $this->link_id = 0; } public function error($err_msg='') { if (empty($err_msg)) { $this->error .= "<br />\nMYSQL错误: ".mysql_error($this->link_id); } else { $this->error = $err_msg; } $this->error .= "<br />\nSQL语句: ".$this->sql; if ($this->debug) trigger_error($this->error, E_USER_ERROR); return $this->error; } public function __destruct() { $this->close(); } } class Factory { public static function getPath($type, $class_name='') { switch($type) { case 'ctrl': $ctrl_path = C('ctrl_path'); if (!is_array($ctrl_path)) $ctrl_path = array(); $ret = get_app_root().'/ctrls'.(isset($ctrl_path[$class_name]) ? '/'.$ctrl_path[$class_name] : ''); return $ret; break; case 'mod': $mod_path = C('mod_path'); if (!is_array($mod_path)) $mod_path = array(); $ret = get_app_root().'/mods'.(isset($mod_path[$class_name]) ? '/'.$mod_path[$class_name] : ''); return $ret; break; case 'data': $data_path = C('data_path'); if (!is_array($data_path)) $data_path = array(); $ret = get_app_root().'/datas'.(isset($data_path[$class_name]) ? '/'.$data_path[$class_name] : ''); return $ret; break; case 'view': return get_app_root().'/views'; break; default: break; } } public static function getCtrl($class_name) { static $_instance = array(); $path = Factory::getPath('ctrl', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $ctrl_file = $path.'/'.$class_name.'.ctrl.php'; if (!is_file($ctrl_file)) throw_exception('加载控制器文件时出现异常，可能是控制器不存在。ctrl-file:'.$ctrl_file); require_once($ctrl_file); $class_name = parse_name($class_name.'_ctrl', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getMod($class_name) { static $_instance = array(); $path = Factory::getPath('mod', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $module_file = $path.'/'.$class_name.'.mod.php'; if (!is_file($module_file)) { trigger_error(__FUNCTION__.': module file no found: '.$module_file, E_USER_ERROR); } require_once($module_file); $class_name = parse_name($class_name.'_mod', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getData($class_name) { static $_instance = array(); $path = Factory::getPath('data', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $data_file = $path.'/'.$class_name.'.data.php'; if (!is_file($data_file)) { trigger_error(__FUNCTION__.': data file no found: '.$data_file, E_USER_ERROR); } require_once($data_file); $class_name = parse_name($class_name.'_data', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getView($filename, $data=array(), $output=true){ if (!headers_sent()) header('Content-type: text/html; charset=utf-8'); if ($data) { if (is_array($data)) { extract($data, EXTR_SKIP); } elseif (is_object($data)) { $data = get_object_vars($data); } else { trigger_error(__FUNCTION__.': unsupported variable type of data', E_USER_ERROR); } } $path = Factory::getPath('view'); $view_file = $path . '/' . $filename . '.view.php'; if (!is_file($view_file)) { trigger_error(__FUNCTION__.': view file no found: '.$view_file, E_USER_ERROR); } if ($output) { return require($view_file); } else { ob_start(); require $view_file; $view_content = ob_get_clean(); return $view_content; } } public static function compileData($data_file) { $data_content = file_get_contents($data_file); return $data_content; } public static function compileView($view_file) { $view_content = file_get_contents($view_file); return $view_content; } public static function getModulePath($module,$type, $class_name=''){ switch($type) { case 'ctrl': $ctrl_path = C('ctrl_path'); if (!is_array($ctrl_path)) $ctrl_path = array(); $ret = get_app_root().'/../'.$module.'/ctrls'.(isset($ctrl_path[$class_name]) ? '/'.$ctrl_path[$class_name] : ''); return $ret; break; case 'mod': $mod_path = C('mod_path'); if (!is_array($mod_path)) $mod_path = array(); $ret = get_app_root().'/../'.$module.'/mods'.(isset($mod_path[$class_name]) ? '/'.$mod_path[$class_name] : ''); return $ret; break; case 'data': $data_path = C('data_path'); if (!is_array($data_path)) $data_path = array(); $ret = get_app_root().'/../'.$module.'/datas'.(isset($data_path[$class_name]) ? '/'.$data_path[$class_name] : ''); return $ret; break; case 'helper': return get_app_root().'/../'.$module.'/helpers'; break; case 'view': return get_app_root().'/../'.$module.'/views'; break; default: break; } } public static function getModuleCtrl($module,$class_name){ static $_instance = array(); $path = Factory::getModulePath($module,'ctrl', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $ctrl_file = $path.'/'.$class_name.'.ctrl.php'; if (!is_file($ctrl_file)) throw_exception('加载控制器文件时出现异常，可能是控制器不存在。ctrl-file:'.$ctrl_file); require_once($ctrl_file); $class_name = parse_name($class_name.'_ctrl', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getModuleMod($module,$class_name){ static $_instance = array(); $path = Factory::getModulePath($module,'mod', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $module_file = $path.'/'.$class_name.'.mod.php'; if (!is_file($module_file)) { trigger_error(__FUNCTION__.': module file no found: '.$module_file, E_USER_ERROR); } require_once($module_file); $class_name = parse_name($class_name.'_mod', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getModuleData($module,$class_name){ static $_instance = array(); $path = Factory::getModulePath($module,'data', $class_name); $identify = to_guid_string($path.'/'.$class_name); if (IS_CLI || (!isset($_instance[$identify]))) { $data_file = $path.'/'.$class_name.'.data.php'; if (!is_file($data_file)) { trigger_error(__FUNCTION__.': data file no found: '.$data_file, E_USER_ERROR); } require_once($data_file); $class_name = parse_name($class_name.'_data', 1); $o = new $class_name(); $_instance[$identify] = $o; } return $_instance[$identify]; } public static function getModuleView($module,$filename, $data=array(), $output=true){ if (!headers_sent()) header('Content-type: text/html; charset=utf-8'); if ($data) { if (is_array($data)) { extract($data, EXTR_SKIP); } elseif (is_object($data)) { $data = get_object_vars($data); } else { trigger_error(__FUNCTION__.': unsupported variable type of data', E_USER_ERROR); } } $path = Factory::getModulePath($module,'view'); $view_file = $path . '/' . $filename . '.view.php'; if (!is_file($view_file)) { trigger_error(__FUNCTION__.': view file no found: '.$view_file, E_USER_ERROR); } if ($output) { return require($view_file); } else { ob_start(); require $view_file; $view_content = ob_get_clean(); return $view_content; } } } class App { public static function init() { set_error_handler(array('App', 'appError')); set_exception_handler(array('App','appException')); if (!isset($_GET['c']) || empty($_GET['c'])) $_GET['c'] = 'index'; if (!isset($_GET['a']) || empty($_GET['a'])) $_GET['a'] = 'index'; $c = $_GET['c']; $a = parse_name($_GET['a'], 2); if (!preg_match('/^[a-zA-Z0-9_]+$/', $c)) { trigger_error('invalid GET param c!', E_USER_ERROR); } if (!preg_match('/^[a-zA-Z0-9_]+$/', $a)) { trigger_error('invalid GET param a!', E_USER_ERROR); } C('APP_DEBUG') || (isset($_GET['_debug']) ? C('APP_DEBUG', true) : ''); if (C('APP_DEBUG')) { debug(); } return array($c, $a); } public static function exec($c, $a) { $ctrl_obj = Factory::getCtrl($c); $ctrl_obj->{$a}(); } public static function run() { list($c, $a) = App::init(); if (C('APP_DEBUG')) $GLOBALS['_t_app_init'] = microtime(true); App::exec($c, $a); } public static function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; halt($errorStr, 2); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; Log::record($errorStr,Log::NOTICE); break; } } public static function appException($e) { halt($e->__toString(), 1); } public static function showTrace() { $_trace = array(); $_trace['当前页面'] = $_SERVER['REQUEST_URI']; $_trace['请求方法'] = $_SERVER['REQUEST_METHOD']; $_trace['通信协议'] = $_SERVER['SERVER_PROTOCOL']; $_trace['请求时间'] = date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']); $_trace['用户代理'] = $_SERVER['HTTP_USER_AGENT']; $_trace['执行时间'] = (microtime(true)-$GLOBALS['_t_app_start']).'秒'; $_trace['会话ID'] = session_id(); $log = Log::$log; $_trace['日志记录'] = count($log)?count($log).'条日志<br/>'.implode('<br/>',$log):'无日志记录'; if (RUN_MOD !== 'deploy') { $files = get_included_files(); $_trace['加载文件'] = count($files).str_replace("\n",'<br/>',substr(substr(print_r($files,true),7),0,-2)); } include C('APP_TRACE_FILE'); } } class U {} class BaseCtrl extends U { public function test_post_data($array){ if(!is_array($array)){ return ''; } foreach ($array as $key => $value) { $_POST[$key]= $value; } } } class BaseMod extends U {} class BaseData extends U {} class BaseHelper extends U {} class AppException extends Exception { private $type; private $extra; public function __construct($message, $code=0, $extra=false) { parent::__construct($message, $code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); if($this->extra) array_shift($trace); $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->file = $trace[0]['file']; $this->line = $trace[0]['line']; $file = file($this->file); $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")\n"; } $error['message'] = $this->message; $error['type'] = $this->type; $error['detail'] = ''; $error['detail'] .= ($this->line-2).': '.$file[$this->line-3]; $error['detail'] .= ($this->line-1).': '.$file[$this->line-2]; $error['detail'] .= '<font color="#FF6600" >'.($this->line).': <b>'.$file[$this->line-1].'</b></font>'; $error['detail'] .= ($this->line+1).': '.$file[$this->line]; $error['detail'] .= ($this->line+2).': '.$file[$this->line+1]; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; return $error ; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const TCP = 2; const FILE = 3; static $log = array(); static $format = '[m-d H:i:s]'; static function record($message,$level=self::ERR,$record=false) { if($record || in_array($level, explode(',', C('LOG_RECORD_LEVEL')))) { $now = date(self::$format); self::$log[] = "{$now} {$level}: {$message}\r\n"; } } static function save($type=self::FILE, $destination='', $extra='') { if(empty($destination)) $destination = get_app_root().'/cache/'.date('y_m_d').'.log'; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_RECORD_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log(implode("", self::$log), $type, $destination, $extra); self::$log = array(); } static function write($message, $level=self::ERR, $type=self::FILE, $destination='', $extra='') { $now = date(self::$format); if(empty($destination)) $destination = get_app_root().'/cache/'.date('y_m_d').'.log'; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_RECORD_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log("{$now} {$message} ({$level})\r\n", $type,$destination,$extra ); } } class Cookie { static function is_set($name) { return isset($_COOKIE[C('COOKIE_PREFIX').$name]); } static function get($name) { return Cookie::is_set($name) ? $_COOKIE[C('COOKIE_PREFIX').$name] : ''; } static function set($name, $value, $expire='', $path='', $domain='') { if($expire=='') { $expire = C('COOKIE_EXPIRE'); } if(empty($path)) { $path = C('COOKIE_PATH'); } if(empty($domain)) { $domain = C('COOKIE_DOMAIN'); } $expire = !empty($expire) ? time()+$expire : 0; setcookie(C('COOKIE_PREFIX').$name, $value, $expire, $path, $domain); $_COOKIE[C('COOKIE_PREFIX').$name] = $value; } static function delete($name) { Cookie::set($name,'',-1); unset($_COOKIE[C('COOKIE_PREFIX').$name]); } static function clear() { unset($_COOKIE); } } class Cache { protected $cfg_name; protected $cfg_key; public function __construct($cfg_name) { if (empty($cfg_name)) { halt(__FUNCTION__.': 没有指定缓存配置文件名称！'); } $key = 'core_cache_class_'.$cfg_name; $this->cfg_name = $cfg_name.'17gou'; $this->cfg_key = $key; if (C($key)) return; $filename = CONFIG_PATH.'cache/'.$cfg_name.'.cache.php'; if (!is_file($filename)) { halt('cfg_name:'.$cfg_name.' is invalid, cache config file:'.$filename.' is not found'); } $class_list = include $filename; if (!is_array($class_list)) { halt('return value is not an array in cache config file:'.$filename); } C(array($key=>$class_list)); } public function get($class, $key) { $cache_conf = $this->load_class($class); if ($cache_conf['off']) return false; $cache = get_instance_of('CacheMM', 'connect', array($cache_conf['host'], $cache_conf['port'])); $key = $this->get_key($key, $class); $this->Q(1); $ret = $cache->get($key); return $this->simple_get($ret, $key, $class); } public function set($class, $key, $value) { $cache_conf = $this->load_class($class); $cache = get_instance_of('CacheMM', 'connect', array($cache_conf['host'], $cache_conf['port'])); $key = $this->get_key($key, $class); $this->W(1); return $cache->set($key, $value, $cache_conf['timeout']); } public function add($class,$key,$value){ $cache_conf = $this->load_class($class); $cache = get_instance_of('CacheMM', 'connect', array($cache_conf['host'], $cache_conf['port'])); $key = $this->get_key($key, $class); return $cache->add($key, $value,$cache_conf['timeout']); } public function delete($class, $key) { $cache_conf = $this->load_class($class); $cache = get_instance_of('CacheMM', 'connect', array($cache_conf['host'], $cache_conf['port'])); $key = $this->get_key($key, $class); return $cache->delete($key); } public function Q($count='') { static $_times = 0; if (empty($count)) return $_times; else $_times++; } public function W($count='') { static $_times = 0; if (empty($count)) return $_times; else $_times++; } private function get_key($key, $class) { if (is_array($key)) { $ret = array(); foreach ($key as $k=>$v) { $ret[] = $this->cfg_name.'-'.$class.'-'.$v; } return $ret; } else return $this->cfg_name.'-'.$class.'-'.$key; } private function simple_get($res, $key, $class) { if (is_array($key)) { $ret = array(); $prefix = $this->cfg_name.'-'.$class.'-'; foreach ($res as $k=>$v) { $k = str_replace('*&#^$#*=='.$prefix, '', '*&#^$#*=='.$k); $ret[$k] = $v; } $ret2 = array(); foreach ($key as $k=>$v) { $v = str_replace('*&#^$#*=='.$prefix, '', '*&#^$#*=='.$v); if (isset($ret[$v])) $ret2[$v] = $ret[$v]; else { $ret2[$v] = false; } } return $ret2; } else return $res; } private function load_class($class) { if (empty($class)) { halt(__FUNCTION__.': 缓存类型不能为空'); } $class_list = C($this->cfg_key); if (!isset($class_list[$class])) { halt(__FUNCTION__.': 缓存类型['.$class.']在配置文件里没有定义'); } $sid = $class_list[$class]['sid']; $cache_list = C('core_cache_list'); if (!($sid && isset($cache_list[$sid]))) { halt(__FUNCTION__.': 缓存类型['.$class.']定义的sid: '.$sid.'没有在cache.inc.php里定义'); } return array( 'host' => $cache_list[$sid][0], 'port' => $cache_list[$sid][1], 'timeout' => $class_list[$class]['timeout'], 'off' => isset($class_list[$class]['off']) && $class_list[$class]['off'] ? true : false, ); } } class CacheMm { private $mm=null; private $host=''; private $port=''; public function __construct() { } public function __destruct() { $this->_disconnect(); } public function connect($host, $port) { $this->host = $host; $this->port = $port; } public function _connect() { $this->mm = new Memcache(); $this->mm->addServer($this->host, $this->port, false); return; } public function _disconnect() { if (!is_null($this->mm)) { $this->mm->close(); } } public function get($key) { $this->_connect(); $ret = $this->mm->get($key); $this->_disconnect(); return $ret; } public function set($key, $value, $timeout=0) { $this->_connect(); $ret = $this->mm->set($key, $value, 0, $timeout); $this->_disconnect(); return $ret; } public function add($key, $value, $timeout=0) { $this->_connect(); $add = $this->mm->add($key, $value, 0, $timeout); $this->_disconnect(); return $add; } public function delete($key) { $this->_connect(); $ret = $this->mm->delete($key); $this->_disconnect(); return $ret; } } class PredisException extends Exception { } class Predis_ClientException extends PredisException { } class Predis_AbortedMultiExec extends PredisException { } class Predis_ServerException extends PredisException { public function toResponseError() { return new Predis_ResponseError($this->getMessage()); } } class Predis_CommunicationException extends PredisException { private $_connection; public function __construct(Predis_Connection $connection, $message = null, $code = null) { $this->_connection = $connection; parent::__construct($message, $code); } public function getConnection() { return $this->_connection; } public function shouldResetConnection() { return true; } } class Predis_MalformedServerResponse extends Predis_CommunicationException { } class Predis_Client { private $_options, $_connection, $_serverProfile, $_responseReader; public function __construct($parameters = null, $clientOptions = null) { $this->setupClient($clientOptions !== null ? $clientOptions : new Predis_ClientOptions()); $this->setupConnection($parameters); } public static function create() { $argv = func_get_args(); $argc = func_num_args(); $options = null; $lastArg = $argv[$argc-1]; if ($argc > 0 && !is_string($lastArg) && ($lastArg instanceof Predis_ClientOptions || is_subclass_of($lastArg, 'Predis_RedisServerProfile'))) { $options = array_pop($argv); $argc--; } if ($argc === 0) { throw new Predis_ClientException('Missing connection parameters'); } return new Predis_Client($argc === 1 ? $argv[0] : $argv, $options); } private static function filterClientOptions($options) { if ($options instanceof Predis_ClientOptions) { return $options; } if (is_array($options)) { return new Predis_ClientOptions($options); } if ($options instanceof Predis_RedisServerProfile) { return new Predis_ClientOptions(array( 'profile' => $options )); } if (is_string($options)) { return new Predis_ClientOptions(array( 'profile' => Predis_RedisServerProfile::get($options) )); } throw new InvalidArgumentException("Invalid type for client options"); } private function setupClient($options) { $this->_responseReader = new Predis_ResponseReader(); $this->_options = self::filterClientOptions($options); $this->setProfile($this->_options->profile); if ($this->_options->iterable_multibulk === true) { $this->_responseReader->setHandler( Predis_Protocol::PREFIX_MULTI_BULK, new Predis_ResponseMultiBulkStreamHandler() ); } if ($this->_options->throw_on_error === false) { $this->_responseReader->setHandler( Predis_Protocol::PREFIX_ERROR, new Predis_ResponseErrorSilentHandler() ); } } private function setupConnection($parameters) { if ($parameters !== null && !(is_array($parameters) || is_string($parameters))) { throw new Predis_ClientException('Invalid parameters type (array or string expected)'); } if (is_array($parameters) && isset($parameters[0])) { $cluster = new Predis_ConnectionCluster($this->_options->key_distribution); foreach ($parameters as $shardParams) { $cluster->add($this->createConnection($shardParams)); } $this->setConnection($cluster); } else { $this->setConnection($this->createConnection($parameters)); } } private function createConnection($parameters) { $params = $parameters instanceof Predis_ConnectionParameters ? $parameters : new Predis_ConnectionParameters($parameters); $connection = new Predis_Connection($params, $this->_responseReader); if ($params->password !== null) { $connection->pushInitCommand($this->createCommand( 'auth', array($params->password) )); } if ($params->database !== null) { $connection->pushInitCommand($this->createCommand( 'select', array($params->database) )); } return $connection; } private function setConnection(Predis_IConnection $connection) { $this->_connection = $connection; } public function setProfile($serverProfile) { if (!($serverProfile instanceof Predis_RedisServerProfile || is_string($serverProfile))) { throw new InvalidArgumentException( "Invalid type for server profile, Predis_RedisServerProfile or string expected" ); } $this->_serverProfile = (is_string($serverProfile) ? Predis_RedisServerProfile::get($serverProfile) : $serverProfile ); } public function getProfile() { return $this->_serverProfile; } public function getResponseReader() { return $this->_responseReader; } public function getClientFor($connectionAlias) { if (!Predis_Shared_Utils::isCluster($this->_connection)) { throw new Predis_ClientException( 'This method is supported only when the client is connected to a cluster of connections' ); } $connection = $this->_connection->getConnectionById($connectionAlias); if ($connection === null) { throw new InvalidArgumentException( "Invalid connection alias: '$connectionAlias'" ); } $newClient = new Predis_Client(); $newClient->setupClient($this->_options); $newClient->setConnection($this->getConnection($connectionAlias)); return $newClient; } public function connect() { $this->_connection->connect(); } public function disconnect() { $this->_connection->disconnect(); } public function isConnected() { return $this->_connection->isConnected(); } public function getConnection($id = null) { if (!isset($id)) { return $this->_connection; } else { return Predis_Shared_Utils::isCluster($this->_connection) ? $this->_connection->getConnectionById($id) : $this->_connection; } } public function __call($method, $arguments) { $command = $this->_serverProfile->createCommand($method, $arguments); return $this->_connection->executeCommand($command); } public function createCommand($method, $arguments = array()) { return $this->_serverProfile->createCommand($method, $arguments); } public function executeCommand(Predis_Command $command) { return $this->_connection->executeCommand($command); } public function executeCommandOnShards(Predis_Command $command) { $replies = array(); if (Predis_Shared_Utils::isCluster($this->_connection)) { foreach($this->_connection as $connection) { $replies[] = $connection->executeCommand($command); } } else { $replies[] = $this->_connection->executeCommand($command); } return $replies; } public function rawCommand($rawCommandData, $closesConnection = false) { if (Predis_Shared_Utils::isCluster($this->_connection)) { throw new Predis_ClientException('Cannot send raw commands when connected to a cluster of Redis servers'); } return $this->_connection->rawCommand($rawCommandData, $closesConnection); } public function pipeline() { $argv = func_get_args(); $argc = func_num_args(); if ($argc === 0) { return $this->initPipeline(); } else if ($argc === 1) { list($arg0) = $argv; return is_array($arg0) ? $this->initPipeline($arg0) : $this->initPipeline(null, $arg0); } else if ($argc === 2) { list($arg0, $arg1) = $argv; return $this->initPipeline($arg0, $arg1); } } public function pipelineSafe($pipelineBlock = null) { return $this->initPipeline(array('safe' => true), $pipelineBlock); } private function initPipeline(Array $options = null, $pipelineBlock = null) { $pipeline = null; if (isset($options)) { if (isset($options['safe']) && $options['safe'] == true) { $connection = $this->getConnection(); $pipeline = new Predis_CommandPipeline($this, $connection instanceof Predis_Connection ? new Predis_Pipeline_SafeExecutor($connection) : new Predis_Pipeline_SafeClusterExecutor($connection) ); } else { $pipeline = new Predis_CommandPipeline($this); } } else { $pipeline = new Predis_CommandPipeline($this); } return $this->pipelineExecute($pipeline, $pipelineBlock); } private function pipelineExecute(Predis_CommandPipeline $pipeline, $block) { return $block !== null ? $pipeline->execute($block) : $pipeline; } public function multiExec() { $argv = func_get_args(); $argc = func_num_args(); if ($argc === 0) { return $this->initMultiExec(); } else if ($argc === 1) { list($arg0) = $argv; return is_array($arg0) ? $this->initMultiExec($arg0) : $this->initMultiExec(null, $arg0); } else if ($argc === 2) { list($arg0, $arg1) = $argv; return $this->initMultiExec($arg0, $arg1); } } private function initMultiExec(Array $options = null, $transBlock = null) { $multi = isset($options) ? new Predis_MultiExecBlock($this, $options) : new Predis_MultiExecBlock($this); return $transBlock !== null ? $multi->execute($transBlock) : $multi; } public function pubSubContext() { return new Predis_PubSubContext($this); } } interface Predis_IClientOptionsHandler { public function validate($option, $value); public function getDefault(); } class Predis_ClientOptionsProfile implements Predis_IClientOptionsHandler { public function validate($option, $value) { if ($value instanceof Predis_RedisServerProfile) { return $value; } if (is_string($value)) { return Predis_RedisServerProfile::get($value); } throw new InvalidArgumentException("Invalid value for option $option"); } public function getDefault() { return Predis_RedisServerProfile::getDefault(); } } class Predis_ClientOptionsKeyDistribution implements Predis_IClientOptionsHandler { public function validate($option, $value) { if ($value instanceof Predis_Distribution_IDistributionStrategy) { return $value; } if (is_string($value)) { $valueReflection = new ReflectionClass($value); if ($valueReflection->isSubclassOf('Predis_Distribution_IDistributionStrategy')) { return new $value; } } throw new InvalidArgumentException("Invalid value for option $option"); } public function getDefault() { return new Predis_Distribution_HashRing(); } } class Predis_ClientOptionsIterableMultiBulk implements Predis_IClientOptionsHandler { public function validate($option, $value) { return (bool) $value; } public function getDefault() { return false; } } class Predis_ClientOptionsThrowOnError implements Predis_IClientOptionsHandler { public function validate($option, $value) { return (bool) $value; } public function getDefault() { return true; } } class Predis_ClientOptions { private static $_optionsHandlers; private $_options; public function __construct($options = null) { self::initializeOptionsHandlers(); $this->initializeOptions($options !== null ? $options : array()); } private static function initializeOptionsHandlers() { if (!isset(self::$_optionsHandlers)) { self::$_optionsHandlers = self::getOptionsHandlers(); } } private static function getOptionsHandlers() { return array( 'profile' => new Predis_ClientOptionsProfile(), 'key_distribution' => new Predis_ClientOptionsKeyDistribution(), 'iterable_multibulk' => new Predis_ClientOptionsIterableMultiBulk(), 'throw_on_error' => new Predis_ClientOptionsThrowOnError(), ); } private function initializeOptions($options) { foreach ($options as $option => $value) { if (isset(self::$_optionsHandlers[$option])) { $handler = self::$_optionsHandlers[$option]; $this->_options[$option] = $handler->validate($option, $value); } } } public function __get($option) { if (!isset($this->_options[$option])) { $defaultValue = self::$_optionsHandlers[$option]->getDefault(); $this->_options[$option] = $defaultValue; } return $this->_options[$option]; } public function __isset($option) { return isset(self::$_optionsHandlers[$option]); } } class Predis_Protocol { const NEWLINE = "\r\n"; const OK = 'OK'; const ERROR = 'ERR'; const QUEUED = 'QUEUED'; const NULL = 'nil'; const PREFIX_STATUS = '+'; const PREFIX_ERROR = '-'; const PREFIX_INTEGER = ':'; const PREFIX_BULK = '$'; const PREFIX_MULTI_BULK = '*'; } abstract class Predis_Command { private $_arguments, $_hash; public abstract function getCommandId(); public abstract function serializeRequest($command, $arguments); public function canBeHashed() { return true; } public function getHash(Predis_Distribution_IDistributionStrategy $distributor) { if (isset($this->_hash)) { return $this->_hash; } else { if (isset($this->_arguments[0])) { $key = $this->_arguments[0]; $start = strpos($key, '{'); $end = strpos($key, '}'); if ($start !== false && $end !== false) { $key = substr($key, ++$start, $end - $start); } $this->_hash = $distributor->generateKey($key); return $this->_hash; } } return null; } public function closesConnection() { return false; } protected function filterArguments(Array $arguments) { return $arguments; } public function setArguments() { $this->_arguments = $this->filterArguments(func_get_args()); $this->_hash = null; } public function setArgumentsArray(Array $arguments) { $this->_arguments = $this->filterArguments($arguments); $this->_hash = null; } public function getArguments() { return isset($this->_arguments) ? $this->_arguments : array(); } public function getArgument($index = 0) { return isset($this->_arguments[$index]) ? $this->_arguments[$index] : null; } public function parseResponse($data) { return $data; } public final function invoke() { return $this->serializeRequest($this->getCommandId(), $this->getArguments()); } } abstract class Predis_InlineCommand extends Predis_Command { public function serializeRequest($command, $arguments) { if (isset($arguments[0]) && is_array($arguments[0])) { $arguments[0] = implode($arguments[0], ' '); } return $command . (count($arguments) > 0 ? ' ' . implode($arguments, ' ') . Predis_Protocol::NEWLINE : Predis_Protocol::NEWLINE ); } } abstract class Predis_BulkCommand extends Predis_Command { public function serializeRequest($command, $arguments) { $data = array_pop($arguments); if (is_array($data)) { $data = implode($data, ' '); } return $command . ' ' . implode($arguments, ' ') . ' ' . strlen($data) . Predis_Protocol::NEWLINE . $data . Predis_Protocol::NEWLINE; } } abstract class Predis_MultiBulkCommand extends Predis_Command { public function serializeRequest($command, $arguments) { $cmd_args = null; $argsc = count($arguments); if ($argsc === 1 && is_array($arguments[0])) { $cmd_args = $arguments[0]; $argsc = count($cmd_args); } else { $cmd_args = $arguments; } $newline = Predis_Protocol::NEWLINE; $cmdlen = strlen($command); $reqlen = $argsc + 1; $buffer = "*{$reqlen}{$newline}\${$cmdlen}{$newline}{$command}{$newline}"; foreach ($cmd_args as $argument) { $arglen = strlen($argument); $buffer .= "\${$arglen}{$newline}{$argument}{$newline}"; } return $buffer; } } interface Predis_IResponseHandler { function handle(Predis_Connection $connection, $payload); } class Predis_ResponseStatusHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $status) { if ($status === Predis_Protocol::OK) { return true; } else if ($status === Predis_Protocol::QUEUED) { return new Predis_ResponseQueued(); } return $status; } } class Predis_ResponseErrorHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $errorMessage) { throw new Predis_ServerException(substr($errorMessage, 4)); } } class Predis_ResponseErrorSilentHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $errorMessage) { return new Predis_ResponseError(substr($errorMessage, 4)); } } class Predis_ResponseBulkHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $dataLength) { if (!is_numeric($dataLength)) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, "Cannot parse '$dataLength' as data length" )); } if ($dataLength > 0) { $value = $connection->readBytes($dataLength); self::discardNewLine($connection); return $value; } else if ($dataLength == 0) { self::discardNewLine($connection); return ''; } return null; } private static function discardNewLine(Predis_Connection $connection) { if ($connection->readBytes(2) !== Predis_Protocol::NEWLINE) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, 'Did not receive a new-line at the end of a bulk response' )); } } } class Predis_ResponseMultiBulkHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $rawLength) { if (!is_numeric($rawLength)) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, "Cannot parse '$rawLength' as data length" )); } $listLength = (int) $rawLength; if ($listLength === -1) { return null; } $list = array(); if ($listLength > 0) { $reader = $connection->getResponseReader(); for ($i = 0; $i < $listLength; $i++) { $list[] = $reader->read($connection); } } return $list; } } class Predis_ResponseMultiBulkStreamHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $rawLength) { if (!is_numeric($rawLength)) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, "Cannot parse '$rawLength' as data length" )); } return new Predis_Shared_MultiBulkResponseIterator($connection, (int)$rawLength); } } class Predis_ResponseIntegerHandler implements Predis_IResponseHandler { public function handle(Predis_Connection $connection, $number) { if (is_numeric($number)) { return (int) $number; } else { if ($number !== Predis_Protocol::NULL) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, "Cannot parse '$number' as numeric response" )); } return null; } } } class Predis_ResponseReader { private $_prefixHandlers; public function __construct() { $this->initializePrefixHandlers(); } private function initializePrefixHandlers() { $this->_prefixHandlers = array( Predis_Protocol::PREFIX_STATUS => new Predis_ResponseStatusHandler(), Predis_Protocol::PREFIX_ERROR => new Predis_ResponseErrorHandler(), Predis_Protocol::PREFIX_INTEGER => new Predis_ResponseIntegerHandler(), Predis_Protocol::PREFIX_BULK => new Predis_ResponseBulkHandler(), Predis_Protocol::PREFIX_MULTI_BULK => new Predis_ResponseMultiBulkHandler(), ); } public function setHandler($prefix, Predis_IResponseHandler $handler) { $this->_prefixHandlers[$prefix] = $handler; } public function getHandler($prefix) { if (isset($this->_prefixHandlers[$prefix])) { return $this->_prefixHandlers[$prefix]; } } public function read(Predis_Connection $connection) { $header = $connection->readLine(); if ($header === '') { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, 'Unexpected empty header' )); } $prefix = $header[0]; $payload = strlen($header) > 1 ? substr($header, 1) : ''; if (!isset($this->_prefixHandlers[$prefix])) { Predis_Shared_Utils::onCommunicationException(new Predis_MalformedServerResponse( $connection, "Unknown prefix '$prefix'" )); } $handler = $this->_prefixHandlers[$prefix]; return $handler->handle($connection, $payload); } } class Predis_ResponseError { private $_message; public function __construct($message) { $this->_message = $message; } public function __get($property) { if ($property == 'error') { return true; } if ($property == 'message') { return $this->_message; } } public function __isset($property) { return $property === 'error'; } public function __toString() { return $this->_message; } } class Predis_ResponseQueued { public $queued = true; public function __toString() { return Predis_Protocol::QUEUED; } } class Predis_CommandPipeline { private $_redisClient, $_pipelineBuffer, $_returnValues, $_running, $_executor; public function __construct(Predis_Client $redisClient, Predis_Pipeline_IPipelineExecutor $executor = null) { $this->_redisClient = $redisClient; $this->_executor = $executor !== null ? $executor : new Predis_Pipeline_StandardExecutor(); $this->_pipelineBuffer = array(); $this->_returnValues = array(); } public function __call($method, $arguments) { $command = $this->_redisClient->createCommand($method, $arguments); $this->recordCommand($command); return $this; } private function recordCommand(Predis_Command $command) { $this->_pipelineBuffer[] = $command; } private function getRecordedCommands() { return $this->_pipelineBuffer; } public function flushPipeline() { if (count($this->_pipelineBuffer) > 0) { $connection = $this->_redisClient->getConnection(); $this->_returnValues = array_merge( $this->_returnValues, $this->_executor->execute($connection, $this->_pipelineBuffer) ); $this->_pipelineBuffer = array(); } return $this; } private function setRunning($bool) { if ($bool == true && $this->_running == true) { throw new Predis_ClientException("This pipeline is already opened"); } $this->_running = $bool; } public function execute($block = null) { if ($block && !is_callable($block)) { throw new InvalidArgumentException('Argument passed must be a callable object'); } $this->setRunning(true); $pipelineBlockException = null; try { if ($block !== null) { $block($this); } $this->flushPipeline(); } catch (Exception $exception) { $pipelineBlockException = $exception; } $this->setRunning(false); if ($pipelineBlockException !== null) { throw $pipelineBlockException; } return $this->_returnValues; } } class Predis_MultiExecBlock { private $_initialized, $_discarded, $_insideBlock; private $_redisClient, $_options, $_commands; private $_supportsWatch; public function __construct(Predis_Client $redisClient, Array $options = null) { $this->checkCapabilities($redisClient); $this->_initialized = false; $this->_discarded = false; $this->_insideBlock = false; $this->_redisClient = $redisClient; $this->_options = isset($options) ? $options : array(); $this->_commands = array(); } private function checkCapabilities(Predis_Client $redisClient) { if (Predis_Shared_Utils::isCluster($redisClient->getConnection())) { throw new Predis_ClientException( 'Cannot initialize a MULTI/EXEC context over a cluster of connections' ); } $profile = $redisClient->getProfile(); if ($profile->supportsCommands(array('multi', 'exec', 'discard')) === false) { throw new Predis_ClientException( 'The current profile does not support MULTI, EXEC and DISCARD commands' ); } $this->_supportsWatch = $profile->supportsCommands(array('watch', 'unwatch')); } private function isWatchSupported() { if ($this->_supportsWatch === false) { throw new Predis_ClientException( 'The current profile does not support WATCH and UNWATCH commands' ); } } private function initialize() { if ($this->_initialized === false) { if (isset($this->_options['watch'])) { $this->watch($this->_options['watch']); } $this->_redisClient->multi(); $this->_initialized = true; $this->_discarded = false; } } private function setInsideBlock($value) { $this->_insideBlock = $value; } public function __call($method, $arguments) { $this->initialize(); $command = $this->_redisClient->createCommand($method, $arguments); $response = $this->_redisClient->executeCommand($command); if (isset($response->queued)) { $this->_commands[] = $command; return $this; } else { $this->malformedServerResponse('The server did not respond with a QUEUED status reply'); } } public function watch($keys) { $this->isWatchSupported(); if ($this->_initialized === true) { throw new Predis_ClientException('WATCH inside MULTI is not allowed'); } $reply = null; if (is_array($keys)) { $reply = array(); foreach ($keys as $key) { $reply = $this->_redisClient->watch($keys); } } else { $reply = $this->_redisClient->watch($keys); } return $reply; } public function multi() { $this->initialize(); } public function unwatch() { $this->isWatchSupported(); $this->_redisClient->unwatch(); } public function discard() { $this->_redisClient->discard(); $this->_commands = array(); $this->_initialized = false; $this->_discarded = true; } public function exec() { return $this->execute(); } public function execute($block = null) { if ($this->_insideBlock === true) { throw new Predis_ClientException( "Cannot invoke 'execute' or 'exec' inside an active client transaction block" ); } if ($block && !is_callable($block)) { throw new InvalidArgumentException('Argument passed must be a callable object'); } $blockException = null; $returnValues = array(); try { if ($block !== null) { $this->setInsideBlock(true); $block($this); $this->setInsideBlock(false); } if ($this->_discarded === true) { return; } $reply = $this->_redisClient->exec(); if ($reply === null) { throw new Predis_AbortedMultiExec('The current transaction has been aborted by the server'); } $execReply = $reply instanceof Iterator ? iterator_to_array($reply) : $reply; $commands = &$this->_commands; $sizeofReplies = count($execReply); if ($sizeofReplies !== count($commands)) { $this->malformedServerResponse('Unexpected number of responses for a MultiExecBlock'); } for ($i = 0; $i < $sizeofReplies; $i++) { $returnValues[] = $commands[$i]->parseResponse($execReply[$i] instanceof Iterator ? iterator_to_array($execReply[$i]) : $execReply[$i] ); unset($commands[$i]); } } catch (Exception $exception) { $this->setInsideBlock(false); $blockException = $exception; } if ($blockException !== null) { throw $blockException; } return $returnValues; } } class Predis_PubSubContext implements Iterator { const SUBSCRIBE = 'subscribe'; const UNSUBSCRIBE = 'unsubscribe'; const PSUBSCRIBE = 'psubscribe'; const PUNSUBSCRIBE = 'punsubscribe'; const MESSAGE = 'message'; const PMESSAGE = 'pmessage'; const STATUS_VALID = 0x0001; const STATUS_SUBSCRIBED = 0x0010; const STATUS_PSUBSCRIBED = 0x0100; private $_redisClient, $_position; public function __construct(Predis_Client $redisClient) { $this->checkCapabilities($redisClient); $this->_redisClient = $redisClient; $this->_statusFlags = self::STATUS_VALID; } public function __destruct() { if ($this->valid()) { $this->_redisClient->unsubscribe(); $this->_redisClient->punsubscribe(); } } private function checkCapabilities(Predis_Client $redisClient) { if (Predis_Shared_Utils::isCluster($redisClient->getConnection())) { throw new Predis_ClientException( 'Cannot initialize a PUB/SUB context over a cluster of connections' ); } $profile = $redisClient->getProfile(); $commands = array('publish', 'subscribe', 'unsubscribe', 'psubscribe', 'punsubscribe'); if ($profile->supportsCommands($commands) === false) { throw new Predis_ClientException( 'The current profile does not support PUB/SUB related commands' ); } } private function isFlagSet($value) { return ($this->_statusFlags & $value) === $value; } public function subscribe() { $args = func_get_args(); $this->writeCommand(self::SUBSCRIBE, $args); $this->_statusFlags |= self::STATUS_SUBSCRIBED; } public function unsubscribe() { $args = func_get_args(); $this->writeCommand(self::UNSUBSCRIBE, $args); } public function psubscribe() { $args = func_get_args(); $this->writeCommand(self::PSUBSCRIBE, $args); $this->_statusFlags |= self::STATUS_PSUBSCRIBED; } public function punsubscribe() { $args = func_get_args(); $this->writeCommand(self::PUNSUBSCRIBE, $args); } public function closeContext() { if ($this->valid()) { if ($this->isFlagSet(self::STATUS_SUBSCRIBED)) { $this->unsubscribe(); } if ($this->isFlagSet(self::STATUS_PSUBSCRIBED)) { $this->punsubscribe(); } } } private function writeCommand($method, $arguments) { if (count($arguments) === 1 && is_array($arguments[0])) { $arguments = $arguments[0]; } $command = $this->_redisClient->createCommand($method, $arguments); $this->_redisClient->getConnection()->writeCommand($command); } public function rewind() { } public function current() { return $this->getValue(); } public function key() { return $this->_position; } public function next() { if ($this->isFlagSet(self::STATUS_VALID)) { $this->_position++; } return $this->_position; } public function valid() { $subscriptions = self::STATUS_SUBSCRIBED + self::STATUS_PSUBSCRIBED; return $this->isFlagSet(self::STATUS_VALID) && ($this->_statusFlags & $subscriptions) > 0; } private function invalidate() { $this->_statusFlags = 0x0000; } private function getValue() { $reader = $this->_redisClient->getResponseReader(); $connection = $this->_redisClient->getConnection(); $response = $reader->read($connection); switch ($response[0]) { case self::SUBSCRIBE: case self::UNSUBSCRIBE: case self::PSUBSCRIBE: case self::PUNSUBSCRIBE: if ($response[2] === 0) { $this->invalidate(); } case self::MESSAGE: return (object) array( 'kind' => $response[0], 'channel' => $response[1], 'payload' => $response[2], ); case self::PMESSAGE: return (object) array( 'kind' => $response[0], 'pattern' => $response[1], 'channel' => $response[2], 'payload' => $response[3], ); default: throw new Predis_ClientException( "Received an unknown message type {$response[0]} inside of a pubsub context" ); } } } class Predis_ConnectionParameters { const DEFAULT_HOST = '127.0.0.1'; const DEFAULT_PORT = 6379; const DEFAULT_TIMEOUT = 5; private $_parameters; public function __construct($parameters = null) { $parameters = $parameters !== null ? $parameters : array(); $this->_parameters = is_array($parameters) ? self::filterConnectionParams($parameters) : self::parseURI($parameters); } private static function parseURI($uri) { $parsed = @parse_url($uri); if ($parsed == false || $parsed['scheme'] != 'redis' || $parsed['host'] == null) { throw new Predis_ClientException("Invalid URI: $uri"); } if (array_key_exists('query', $parsed)) { $details = array(); foreach (explode('&', $parsed['query']) as $kv) { list($k, $v) = explode('=', $kv); switch ($k) { case 'database': $details['database'] = $v; break; case 'password': $details['password'] = $v; break; case 'connection_async': $details['connection_async'] = $v; break; case 'connection_persistent': $details['connection_persistent'] = $v; break; case 'connection_timeout': $details['connection_timeout'] = $v; break; case 'read_write_timeout': $details['read_write_timeout'] = $v; break; case 'alias': $details['alias'] = $v; break; case 'weight': $details['weight'] = $v; break; } } $parsed = array_merge($parsed, $details); } return self::filterConnectionParams($parsed); } private static function getParamOrDefault(Array $parameters, $param, $default = null) { return array_key_exists($param, $parameters) ? $parameters[$param] : $default; } private static function filterConnectionParams($parameters) { return array( 'host' => self::getParamOrDefault($parameters, 'host', self::DEFAULT_HOST), 'port' => (int) self::getParamOrDefault($parameters, 'port', self::DEFAULT_PORT), 'database' => self::getParamOrDefault($parameters, 'database'), 'password' => self::getParamOrDefault($parameters, 'password'), 'connection_async' => self::getParamOrDefault($parameters, 'connection_async', false), 'connection_persistent' => self::getParamOrDefault($parameters, 'connection_persistent', false), 'connection_timeout' => self::getParamOrDefault($parameters, 'connection_timeout', self::DEFAULT_TIMEOUT), 'read_write_timeout' => self::getParamOrDefault($parameters, 'read_write_timeout'), 'alias' => self::getParamOrDefault($parameters, 'alias'), 'weight' => self::getParamOrDefault($parameters, 'weight'), ); } public function __get($parameter) { return $this->_parameters[$parameter]; } public function __isset($parameter) { return isset($this->_parameters[$parameter]); } } interface Predis_IConnection { public function connect(); public function disconnect(); public function isConnected(); public function writeCommand(Predis_Command $command); public function readResponse(Predis_Command $command); public function executeCommand(Predis_Command $command); } class Predis_Connection implements Predis_IConnection { private $_params, $_socket, $_initCmds, $_reader; public function __construct(Predis_ConnectionParameters $parameters, Predis_ResponseReader $reader = null) { $this->_params = $parameters; $this->_initCmds = array(); $this->_reader = $reader !== null ? $reader : new Predis_ResponseReader(); } public function __destruct() { if (!$this->_params->connection_persistent) { $this->disconnect(); } } public function isConnected() { return is_resource($this->_socket); } public function connect() { if ($this->isConnected()) { throw new Predis_ClientException('Connection already estabilished'); } $uri = sprintf('tcp://%s:%d/', $this->_params->host, $this->_params->port); $connectFlags = STREAM_CLIENT_CONNECT; if ($this->_params->connection_async) { $connectFlags |= STREAM_CLIENT_ASYNC_CONNECT; } if ($this->_params->connection_persistent) { $connectFlags |= STREAM_CLIENT_PERSISTENT; } $this->_socket = @stream_socket_client( $uri, $errno, $errstr, $this->_params->connection_timeout, $connectFlags ); if (!$this->_socket) { $this->onCommunicationException(trim($errstr), $errno); } if (isset($this->_params->read_write_timeout)) { $timeoutSeconds = floor($this->_params->read_write_timeout); $timeoutUSeconds = ($this->_params->read_write_timeout - $timeoutSeconds) * 1000000; stream_set_timeout($this->_socket, $timeoutSeconds, $timeoutUSeconds); } if (count($this->_initCmds) > 0){ $this->sendInitializationCommands(); } } public function disconnect() { if ($this->isConnected()) { fclose($this->_socket); } } public function pushInitCommand(Predis_Command $command){ $this->_initCmds[] = $command; } private function sendInitializationCommands() { foreach ($this->_initCmds as $command) { $this->writeCommand($command); } foreach ($this->_initCmds as $command) { $this->readResponse($command); } } private function onCommunicationException($message, $code = null) { Predis_Shared_Utils::onCommunicationException( new Predis_CommunicationException($this, $message, $code) ); } public function writeCommand(Predis_Command $command) { $this->writeBytes($command->invoke()); } public function readResponse(Predis_Command $command) { $response = $this->_reader->read($this); $skipparse = isset($response->queued) || isset($response->error); return $skipparse ? $response : $command->parseResponse($response); } public function executeCommand(Predis_Command $command) { $this->writeCommand($command); if ($command->closesConnection()) { return $this->disconnect(); } return $this->readResponse($command); } public function rawCommand($rawCommandData, $closesConnection = false) { $this->writeBytes($rawCommandData); if ($closesConnection) { $this->disconnect(); return; } return $this->_reader->read($this); } public function writeBytes($value) { $socket = $this->getSocket(); while (($length = strlen($value)) > 0) { $written = fwrite($socket, $value); if ($length === $written) { return true; } if ($written === false || $written === 0) { $this->onCommunicationException('Error while writing bytes to the server'); } $value = substr($value, $written); } return true; } public function readBytes($length) { if ($length == 0) { throw new InvalidArgumentException('Length parameter must be greater than 0'); } $socket = $this->getSocket(); $value = ''; do { $chunk = fread($socket, $length); if ($chunk === false || $chunk === '') { $this->onCommunicationException('Error while reading bytes from the server'); } $value .= $chunk; } while (($length -= strlen($chunk)) > 0); return $value; } public function readLine() { $socket = $this->getSocket(); $value = ''; do { $chunk = fgets($socket); if ($chunk === false || strlen($chunk) == 0) { $this->onCommunicationException('Error while reading line from the server'); } $value .= $chunk; } while (substr($value, -2) !== Predis_Protocol::NEWLINE); return substr($value, 0, -2); } public function getSocket() { if (!$this->isConnected()) { $this->connect(); } return $this->_socket; } public function getResponseReader() { return $this->_reader; } public function getParameters() { return $this->_params; } public function __toString() { return sprintf('%s:%d', $this->_params->host, $this->_params->port); } } class Predis_ConnectionCluster implements Predis_IConnection, IteratorAggregate { private $_pool, $_distributor; public function __construct(Predis_Distribution_IDistributionStrategy $distributor = null) { $this->_pool = array(); $this->_distributor = $distributor !== null ? $distributor : new Predis_Distribution_HashRing(); } public function isConnected() { foreach ($this->_pool as $connection) { if ($connection->isConnected()) { return true; } } return false; } public function connect() { foreach ($this->_pool as $connection) { $connection->connect(); } } public function disconnect() { foreach ($this->_pool as $connection) { $connection->disconnect(); } } public function add(Predis_Connection $connection) { $parameters = $connection->getParameters(); if (isset($parameters->alias)) { $this->_pool[$parameters->alias] = $connection; } else { $this->_pool[] = $connection; } $this->_distributor->add($connection, $parameters->weight); } public function getConnection(Predis_Command $command) { if ($command->canBeHashed() === false) { throw new Predis_ClientException( sprintf("Cannot send '%s' commands to a cluster of connections", $command->getCommandId()) ); } return $this->_distributor->get($command->getHash($this->_distributor)); } public function getConnectionById($id = null) { $alias = $id !== null ? $id : 0; return isset($this->_pool[$alias]) ? $this->_pool[$alias] : null; } public function getIterator() { return new ArrayIterator($this->_pool); } public function writeCommand(Predis_Command $command) { $this->getConnection($command)->writeCommand($command); } public function readResponse(Predis_Command $command) { return $this->getConnection($command)->readResponse($command); } public function executeCommand(Predis_Command $command) { $connection = $this->getConnection($command); $connection->writeCommand($command); return $connection->readResponse($command); } } abstract class Predis_RedisServerProfile { private static $_serverProfiles; private $_registeredCommands; public function __construct() { $this->_registeredCommands = $this->getSupportedCommands(); } public abstract function getVersion(); protected abstract function getSupportedCommands(); public static function getDefault() { return self::get('default'); } public static function getDevelopment() { return self::get('dev'); } private static function predisServerProfiles() { return array( '1.2' => 'Predis_RedisServer_v1_2', '2.0' => 'Predis_RedisServer_v2_0', 'default' => 'Predis_RedisServer_v2_0', 'dev' => 'Predis_RedisServer_vNext', ); } public static function registerProfile($profileClass, $aliases) { if (!isset(self::$_serverProfiles)) { self::$_serverProfiles = self::predisServerProfiles(); } $profileReflection = new ReflectionClass($profileClass); if (!$profileReflection->isSubclassOf('Predis_RedisServerProfile')) { throw new Predis_ClientException("Cannot register '$profileClass' as it is not a valid profile class"); } if (is_array($aliases)) { foreach ($aliases as $alias) { self::$_serverProfiles[$alias] = $profileClass; } } else { self::$_serverProfiles[$aliases] = $profileClass; } } public static function get($version) { if (!isset(self::$_serverProfiles)) { self::$_serverProfiles = self::predisServerProfiles(); } if (!isset(self::$_serverProfiles[$version])) { throw new Predis_ClientException("Unknown server profile: $version"); } $profile = self::$_serverProfiles[$version]; return new $profile(); } public function supportsCommands(Array $commands) { foreach ($commands as $command) { if ($this->supportsCommand($command) === false) { return false; } } return true; } public function supportsCommand($command) { return isset($this->_registeredCommands[$command]); } public function createCommand($method, $arguments = array()) { if (!isset($this->_registeredCommands[$method])) { throw new Predis_ClientException("'$method' is not a registered Redis command"); } $commandClass = $this->_registeredCommands[$method]; $command = new $commandClass(); $command->setArgumentsArray($arguments); return $command; } public function registerCommands(Array $commands) { foreach ($commands as $command => $aliases) { $this->registerCommand($command, $aliases); } } public function registerCommand($command, $aliases) { $commandReflection = new ReflectionClass($command); if (!$commandReflection->isSubclassOf('Predis_Command')) { throw new ClientException("Cannot register '$command' as it is not a valid Redis command"); } if (is_array($aliases)) { foreach ($aliases as $alias) { $this->_registeredCommands[$alias] = $command; } } else { $this->_registeredCommands[$aliases] = $command; } } public function __toString() { return $this->getVersion(); } } class Predis_RedisServer_v1_2 extends Predis_RedisServerProfile { public function getVersion() { return '1.2'; } public function getSupportedCommands() { return array( 'ping' => 'Predis_Commands_Ping', 'echo' => 'Predis_Commands_DoEcho', 'auth' => 'Predis_Commands_Auth', 'quit' => 'Predis_Commands_Quit', 'set' => 'Predis_Commands_Set', 'setnx' => 'Predis_Commands_SetPreserve', 'setPreserve' => 'Predis_Commands_SetPreserve', 'mset' => 'Predis_Commands_SetMultiple', 'setMultiple' => 'Predis_Commands_SetMultiple', 'msetnx' => 'Predis_Commands_SetMultiplePreserve', 'setMultiplePreserve' => 'Predis_Commands_SetMultiplePreserve', 'get' => 'Predis_Commands_Get', 'mget' => 'Predis_Commands_GetMultiple', 'getMultiple' => 'Predis_Commands_GetMultiple', 'getset' => 'Predis_Commands_GetSet', 'getSet' => 'Predis_Commands_GetSet', 'incr' => 'Predis_Commands_Increment', 'increment' => 'Predis_Commands_Increment', 'incrby' => 'Predis_Commands_IncrementBy', 'incrementBy' => 'Predis_Commands_IncrementBy', 'decr' => 'Predis_Commands_Decrement', 'decrement' => 'Predis_Commands_Decrement', 'decrby' => 'Predis_Commands_DecrementBy', 'decrementBy' => 'Predis_Commands_DecrementBy', 'exists' => 'Predis_Commands_Exists', 'del' => 'Predis_Commands_Delete', 'delete' => 'Predis_Commands_Delete', 'type' => 'Predis_Commands_Type', 'keys' => 'Predis_Commands_Keys', 'randomkey' => 'Predis_Commands_RandomKey', 'randomKey' => 'Predis_Commands_RandomKey', 'rename' => 'Predis_Commands_Rename', 'renamenx' => 'Predis_Commands_RenamePreserve', 'renamePreserve' => 'Predis_Commands_RenamePreserve', 'expire' => 'Predis_Commands_Expire', 'expireat' => 'Predis_Commands_ExpireAt', 'expireAt' => 'Predis_Commands_ExpireAt', 'dbsize' => 'Predis_Commands_DatabaseSize', 'databaseSize' => 'Predis_Commands_DatabaseSize', 'ttl' => 'Predis_Commands_TimeToLive', 'timeToLive' => 'Predis_Commands_TimeToLive', 'rpush' => 'Predis_Commands_ListPushTail', 'pushTail' => 'Predis_Commands_ListPushTail', 'lpush' => 'Predis_Commands_ListPushHead', 'pushHead' => 'Predis_Commands_ListPushHead', 'llen' => 'Predis_Commands_ListLength', 'listLength' => 'Predis_Commands_ListLength', 'lrange' => 'Predis_Commands_ListRange', 'listRange' => 'Predis_Commands_ListRange', 'ltrim' => 'Predis_Commands_ListTrim', 'listTrim' => 'Predis_Commands_ListTrim', 'lindex' => 'Predis_Commands_ListIndex', 'listIndex' => 'Predis_Commands_ListIndex', 'lset' => 'Predis_Commands_ListSet', 'listSet' => 'Predis_Commands_ListSet', 'lrem' => 'Predis_Commands_ListRemove', 'listRemove' => 'Predis_Commands_ListRemove', 'lpop' => 'Predis_Commands_ListPopFirst', 'popFirst' => 'Predis_Commands_ListPopFirst', 'rpop' => 'Predis_Commands_ListPopLast', 'popLast' => 'Predis_Commands_ListPopLast', 'rpoplpush' => 'Predis_Commands_ListPopLastPushHead', 'listPopLastPushHead' => 'Predis_Commands_ListPopLastPushHead', 'sadd' => 'Predis_Commands_SetAdd', 'setAdd' => 'Predis_Commands_SetAdd', 'srem' => 'Predis_Commands_SetRemove', 'setRemove' => 'Predis_Commands_SetRemove', 'spop' => 'Predis_Commands_SetPop', 'setPop' => 'Predis_Commands_SetPop', 'smove' => 'Predis_Commands_SetMove', 'setMove' => 'Predis_Commands_SetMove', 'scard' => 'Predis_Commands_SetCardinality', 'setCardinality' => 'Predis_Commands_SetCardinality', 'sismember' => 'Predis_Commands_SetIsMember', 'setIsMember' => 'Predis_Commands_SetIsMember', 'sinter' => 'Predis_Commands_SetIntersection', 'setIntersection' => 'Predis_Commands_SetIntersection', 'sinterstore' => 'Predis_Commands_SetIntersectionStore', 'setIntersectionStore' => 'Predis_Commands_SetIntersectionStore', 'sunion' => 'Predis_Commands_SetUnion', 'setUnion' => 'Predis_Commands_SetUnion', 'sunionstore' => 'Predis_Commands_SetUnionStore', 'setUnionStore' => 'Predis_Commands_SetUnionStore', 'sdiff' => 'Predis_Commands_SetDifference', 'setDifference' => 'Predis_Commands_SetDifference', 'sdiffstore' => 'Predis_Commands_SetDifferenceStore', 'setDifferenceStore' => 'Predis_Commands_SetDifferenceStore', 'smembers' => 'Predis_Commands_SetMembers', 'setMembers' => 'Predis_Commands_SetMembers', 'srandmember' => 'Predis_Commands_SetRandomMember', 'setRandomMember' => 'Predis_Commands_SetRandomMember', 'zadd' => 'Predis_Commands_ZSetAdd', 'zsetAdd' => 'Predis_Commands_ZSetAdd', 'zincrby' => 'Predis_Commands_ZSetIncrementBy', 'zsetIncrementBy' => 'Predis_Commands_ZSetIncrementBy', 'zrem' => 'Predis_Commands_ZSetRemove', 'zsetRemove' => 'Predis_Commands_ZSetRemove', 'zrange' => 'Predis_Commands_ZSetRange', 'zsetRange' => 'Predis_Commands_ZSetRange', 'zrevrange' => 'Predis_Commands_ZSetReverseRange', 'zsetReverseRange' => 'Predis_Commands_ZSetReverseRange', 'zrangebyscore' => 'Predis_Commands_ZSetRangeByScore', 'zsetRangeByScore' => 'Predis_Commands_ZSetRangeByScore', 'zcard' => 'Predis_Commands_ZSetCardinality', 'zsetCardinality' => 'Predis_Commands_ZSetCardinality', 'zscore' => 'Predis_Commands_ZSetScore', 'zsetScore' => 'Predis_Commands_ZSetScore', 'zremrangebyscore' => 'Predis_Commands_ZSetRemoveRangeByScore', 'zsetRemoveRangeByScore' => 'Predis_Commands_ZSetRemoveRangeByScore', 'select' => 'Predis_Commands_SelectDatabase', 'selectDatabase' => 'Predis_Commands_SelectDatabase', 'move' => 'Predis_Commands_MoveKey', 'moveKey' => 'Predis_Commands_MoveKey', 'flushdb' => 'Predis_Commands_FlushDatabase', 'flushDatabase' => 'Predis_Commands_FlushDatabase', 'flushall' => 'Predis_Commands_FlushAll', 'flushDatabases' => 'Predis_Commands_FlushAll', 'sort' => 'Predis_Commands_Sort', 'info' => 'Predis_Commands_Info', 'slaveof' => 'Predis_Commands_SlaveOf', 'slaveOf' => 'Predis_Commands_SlaveOf', 'save' => 'Predis_Commands_Save', 'bgsave' => 'Predis_Commands_BackgroundSave', 'backgroundSave' => 'Predis_Commands_BackgroundSave', 'lastsave' => 'Predis_Commands_LastSave', 'lastSave' => 'Predis_Commands_LastSave', 'shutdown' => 'Predis_Commands_Shutdown', 'bgrewriteaof' => 'Predis_Commands_BackgroundRewriteAppendOnlyFile', 'backgroundRewriteAppendOnlyFile' => 'Predis_Commands_BackgroundRewriteAppendOnlyFile', ); } } class Predis_RedisServer_v2_0 extends Predis_RedisServer_v1_2 { public function getVersion() { return '2.0'; } public function getSupportedCommands() { return array_merge(parent::getSupportedCommands(), array( 'multi' => 'Predis_Commands_Multi', 'exec' => 'Predis_Commands_Exec', 'discard' => 'Predis_Commands_Discard', 'setex' => 'Predis_Commands_SetExpire', 'setExpire' => 'Predis_Commands_SetExpire', 'append' => 'Predis_Commands_Append', 'substr' => 'Predis_Commands_Substr', 'blpop' => 'Predis_Commands_ListPopFirstBlocking', 'popFirstBlocking' => 'Predis_Commands_ListPopFirstBlocking', 'brpop' => 'Predis_Commands_ListPopLastBlocking', 'popLastBlocking' => 'Predis_Commands_ListPopLastBlocking', 'zunionstore' => 'Predis_Commands_ZSetUnionStore', 'zsetUnionStore' => 'Predis_Commands_ZSetUnionStore', 'zinterstore' => 'Predis_Commands_ZSetIntersectionStore', 'zsetIntersectionStore' => 'Predis_Commands_ZSetIntersectionStore', 'zcount' => 'Predis_Commands_ZSetCount', 'zsetCount' => 'Predis_Commands_ZSetCount', 'zrank' => 'Predis_Commands_ZSetRank', 'zsetRank' => 'Predis_Commands_ZSetRank', 'zrevrank' => 'Predis_Commands_ZSetReverseRank', 'zsetReverseRank' => 'Predis_Commands_ZSetReverseRank', 'zremrangebyrank' => 'Predis_Commands_ZSetRemoveRangeByRank', 'zsetRemoveRangeByRank' => 'Predis_Commands_ZSetRemoveRangeByRank', 'hset' => 'Predis_Commands_HashSet', 'hashSet' => 'Predis_Commands_HashSet', 'hsetnx' => 'Predis_Commands_HashSetPreserve', 'hashSetPreserve' => 'Predis_Commands_HashSetPreserve', 'hmset' => 'Predis_Commands_HashSetMultiple', 'hashSetMultiple' => 'Predis_Commands_HashSetMultiple', 'hincrby' => 'Predis_Commands_HashIncrementBy', 'hashIncrementBy' => 'Predis_Commands_HashIncrementBy', 'hget' => 'Predis_Commands_HashGet', 'hashGet' => 'Predis_Commands_HashGet', 'hmget' => 'Predis_Commands_HashGetMultiple', 'hashGetMultiple' => 'Predis_Commands_HashGetMultiple', 'hdel' => 'Predis_Commands_HashDelete', 'hashDelete' => 'Predis_Commands_HashDelete', 'hexists' => 'Predis_Commands_HashExists', 'hashExists' => 'Predis_Commands_HashExists', 'hlen' => 'Predis_Commands_HashLength', 'hashLength' => 'Predis_Commands_HashLength', 'hkeys' => 'Predis_Commands_HashKeys', 'hashKeys' => 'Predis_Commands_HashKeys', 'hvals' => 'Predis_Commands_HashValues', 'hashValues' => 'Predis_Commands_HashValues', 'hgetall' => 'Predis_Commands_HashGetAll', 'hashGetAll' => 'Predis_Commands_HashGetAll', 'subscribe' => 'Predis_Commands_Subscribe', 'unsubscribe' => 'Predis_Commands_Unsubscribe', 'psubscribe' => 'Predis_Commands_SubscribeByPattern', 'punsubscribe' => 'Predis_Commands_UnsubscribeByPattern', 'publish' => 'Predis_Commands_Publish', 'config' => 'Predis_Commands_Config', 'configuration' => 'Predis_Commands_Config', )); } } class Predis_RedisServer_vNext extends Predis_RedisServer_v2_0 { public function getVersion() { return '2.1'; } public function getSupportedCommands() { return array_merge(parent::getSupportedCommands(), array( 'watch' => 'Predis_Commands_Watch', 'unwatch' => 'Predis_Commands_Unwatch', )); } } interface Predis_Pipeline_IPipelineExecutor { public function execute(Predis_IConnection $connection, &$commands); } class Predis_Pipeline_StandardExecutor implements Predis_Pipeline_IPipelineExecutor { public function execute(Predis_IConnection $connection, &$commands) { $sizeofPipe = count($commands); $values = array(); foreach ($commands as $command) { $connection->writeCommand($command); } try { for ($i = 0; $i < $sizeofPipe; $i++) { $response = $connection->readResponse($commands[$i]); $values[] = $response instanceof Iterator ? iterator_to_array($response) : $response; unset($commands[$i]); } } catch (Predis_ServerException $exception) { $connection->disconnect(); throw $exception; } return $values; } } class Predis_Pipeline_SafeExecutor implements Predis_Pipeline_IPipelineExecutor { public function execute(Predis_IConnection $connection, &$commands) { $sizeofPipe = count($commands); $values = array(); foreach ($commands as $command) { try { $connection->writeCommand($command); } catch (Predis_CommunicationException $exception) { return array_fill(0, $sizeofPipe, $exception); } } for ($i = 0; $i < $sizeofPipe; $i++) { $command = $commands[$i]; unset($commands[$i]); try { $response = $connection->readResponse($command); $values[] = ($response instanceof Iterator ? iterator_to_array($response) : $response ); } catch (Predis_ServerException $exception) { $values[] = $exception->toResponseError(); } catch (Predis_CommunicationException $exception) { $toAdd = count($commands) - count($values); $values = array_merge($values, array_fill(0, $toAdd, $exception)); break; } } return $values; } } class Predis_Pipeline_SafeClusterExecutor implements Predis_Pipeline_IPipelineExecutor { public function execute(Predis_IConnection $connection, &$commands) { $connectionExceptions = array(); $sizeofPipe = count($commands); $values = array(); foreach ($commands as $command) { $cmdConnection = $connection->getConnection($command); if (isset($connectionExceptions[spl_object_hash($cmdConnection)])) { continue; } try { $cmdConnection->writeCommand($command); } catch (Predis_CommunicationException $exception) { $connectionExceptions[spl_object_hash($cmdConnection)] = $exception; } } for ($i = 0; $i < $sizeofPipe; $i++) { $command = $commands[$i]; unset($commands[$i]); $cmdConnection = $connection->getConnection($command); $connectionObjectHash = spl_object_hash($cmdConnection); if (isset($connectionExceptions[$connectionObjectHash])) { $values[] = $connectionExceptions[$connectionObjectHash]; continue; } try { $response = $cmdConnection->readResponse($command); $values[] = ($response instanceof Iterator ? iterator_to_array($response) : $response ); } catch (Predis_ServerException $exception) { $values[] = $exception->toResponseError(); } catch (Predis_CommunicationException $exception) { $values[] = $exception; $connectionExceptions[$connectionObjectHash] = $exception; } } return $values; } } interface Predis_Distribution_IDistributionStrategy { public function add($node, $weight = null); public function remove($node); public function get($key); public function generateKey($value); } class Predis_Distribution_EmptyRingException extends Exception { } class Predis_Distribution_HashRing implements Predis_Distribution_IDistributionStrategy { const DEFAULT_REPLICAS = 128; const DEFAULT_WEIGHT = 100; private $_nodes, $_ring, $_ringKeys, $_ringKeysCount, $_replicas; public function __construct($replicas = self::DEFAULT_REPLICAS) { $this->_replicas = $replicas; $this->_nodes = array(); } public function add($node, $weight = null) { $this->_nodes[] = array( 'object' => $node, 'weight' => (int) ($weight !== null ? $weight : self::DEFAULT_WEIGHT), ); $this->reset(); } public function remove($node) { for ($i = 0; $i < count($this->_nodes); ++$i) { if ($this->_nodes[$i]['object'] === $node) { array_splice($this->_nodes, $i, 1); $this->reset(); break; } } } private function reset() { unset($this->_ring); unset($this->_ringKeys); unset($this->_ringKeysCount); } private function isInitialized() { return isset($this->_ringKeys); } private function computeTotalWeight() { $totalWeight = 0; foreach ($this->_nodes as $node) { $totalWeight += $node['weight']; } return $totalWeight; } private function initialize() { if ($this->isInitialized()) { return; } if (count($this->_nodes) === 0) { throw new Predis_Distribution_EmptyRingException('Cannot initialize empty hashring'); } $this->_ring = array(); $totalWeight = $this->computeTotalWeight(); $nodesCount = count($this->_nodes); foreach ($this->_nodes as $node) { $weightRatio = $node['weight'] / $totalWeight; $this->addNodeToRing($this->_ring, $node, $nodesCount, $this->_replicas, $weightRatio); } ksort($this->_ring, SORT_NUMERIC); $this->_ringKeys = array_keys($this->_ring); $this->_ringKeysCount = count($this->_ringKeys); } protected function addNodeToRing(&$ring, $node, $totalNodes, $replicas, $weightRatio) { $nodeObject = $node['object']; $nodeHash = (string) $nodeObject; $replicas = (int) round($weightRatio * $totalNodes * $replicas); for ($i = 0; $i < $replicas; $i++) { $key = crc32("$nodeHash:$i"); $ring[$key] = $nodeObject; } } public function generateKey($value) { return crc32($value); } public function get($key) { return $this->_ring[$this->getNodeKey($key)]; } private function getNodeKey($key) { $this->initialize(); $ringKeys = $this->_ringKeys; $upper = $this->_ringKeysCount - 1; $lower = 0; while ($lower <= $upper) { $index = ($lower + $upper) >> 1; $item = $ringKeys[$index]; if ($item > $key) { $upper = $index - 1; } else if ($item < $key) { $lower = $index + 1; } else { return $item; } } return $ringKeys[$this->wrapAroundStrategy($upper, $lower, $this->_ringKeysCount)]; } protected function wrapAroundStrategy($upper, $lower, $ringKeysCount) { return $upper >= 0 ? $upper : $ringKeysCount - 1; } } class Predis_Distribution_KetamaPureRing extends Predis_Distribution_HashRing { const DEFAULT_REPLICAS = 160; public function __construct() { parent::__construct(self::DEFAULT_REPLICAS); } protected function addNodeToRing(&$ring, $node, $totalNodes, $replicas, $weightRatio) { $nodeObject = $node['object']; $nodeHash = (string) $nodeObject; $replicas = (int) floor($weightRatio * $totalNodes * ($replicas / 4)); for ($i = 0; $i < $replicas; $i++) { $unpackedDigest = unpack('V4', md5("$nodeHash-$i", true)); foreach ($unpackedDigest as $key) { $ring[$key] = $nodeObject; } } } public function generateKey($value) { $hash = unpack('V', md5($value, true)); return $hash[1]; } protected function wrapAroundStrategy($upper, $lower, $ringKeysCount) { return $lower < $ringKeysCount ? $lower : 0; } } class Predis_Shared_Utils { public static function isCluster(Predis_IConnection $connection) { return $connection instanceof Predis_ConnectionCluster; } public static function onCommunicationException(Predis_CommunicationException $exception) { if ($exception->shouldResetConnection()) { $connection = $exception->getConnection(); if ($connection->isConnected()) { $connection->disconnect(); } } throw $exception; } } abstract class Predis_Shared_MultiBulkResponseIteratorBase implements Iterator, Countable { protected $_position, $_current, $_replySize; public function rewind() { } public function current() { return $this->_current; } public function key() { return $this->_position; } public function next() { if (++$this->_position < $this->_replySize) { $this->_current = $this->getValue(); } return $this->_position; } public function valid() { return $this->_position < $this->_replySize; } public function count() { return $this->_replySize; } protected abstract function getValue(); } class Predis_Shared_MultiBulkResponseIterator extends Predis_Shared_MultiBulkResponseIteratorBase { private $_connection; public function __construct(Predis_Connection $connection, $size) { $this->_connection = $connection; $this->_reader = $connection->getResponseReader(); $this->_position = 0; $this->_current = $size > 0 ? $this->getValue() : null; $this->_replySize = $size; } public function __destruct() { $this->sync(); } public function sync($drop = false) { if ($drop == true) { if ($this->valid()) { $this->_position = $this->_replySize; $this->_connection->disconnect(); } } else { while ($this->valid()) { $this->next(); } } } protected function getValue() { return $this->_reader->read($this->_connection); } } class Predis_Shared_MultiBulkResponseKVIterator extends Predis_Shared_MultiBulkResponseIteratorBase { private $_iterator; public function __construct(Predis_Shared_MultiBulkResponseIterator $iterator) { $virtualSize = count($iterator) / 2; $this->_iterator = $iterator; $this->_position = 0; $this->_current = $virtualSize > 0 ? $this->getValue() : null; $this->_replySize = $virtualSize; } public function __destruct() { $this->_iterator->sync(); } protected function getValue() { $k = $this->_iterator->current(); $this->_iterator->next(); $v = $this->_iterator->current(); $this->_iterator->next(); return array($k, $v); } } class Predis_Commands_Ping extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'PING'; } public function parseResponse($data) { return $data === 'PONG' ? true : false; } } class Predis_Commands_DoEcho extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'ECHO'; } } class Predis_Commands_Auth extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'AUTH'; } } class Predis_Commands_Quit extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'QUIT'; } public function closesConnection() { return true; } } class Predis_Commands_Set extends Predis_MultiBulkCommand { public function getCommandId() { return 'SET'; } } class Predis_Commands_SetExpire extends Predis_MultiBulkCommand { public function getCommandId() { return 'SETEX'; } } class Predis_Commands_SetPreserve extends Predis_MultiBulkCommand { public function getCommandId() { return 'SETNX'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_SetMultiple extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'MSET'; } public function filterArguments(Array $arguments) { if (count($arguments) === 1 && is_array($arguments[0])) { $flattenedKVs = array(); $args = &$arguments[0]; foreach ($args as $k => $v) { $flattenedKVs[] = $k; $flattenedKVs[] = $v; } return $flattenedKVs; } return $arguments; } } class Predis_Commands_SetMultiplePreserve extends Predis_Commands_SetMultiple { public function canBeHashed() { return false; } public function getCommandId() { return 'MSETNX'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_Get extends Predis_MultiBulkCommand { public function getCommandId() { return 'GET'; } } class Predis_Commands_GetMultiple extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'MGET'; } } class Predis_Commands_GetSet extends Predis_MultiBulkCommand { public function getCommandId() { return 'GETSET'; } } class Predis_Commands_Increment extends Predis_MultiBulkCommand { public function getCommandId() { return 'INCR'; } } class Predis_Commands_IncrementBy extends Predis_MultiBulkCommand { public function getCommandId() { return 'INCRBY'; } } class Predis_Commands_Decrement extends Predis_MultiBulkCommand { public function getCommandId() { return 'DECR'; } } class Predis_Commands_DecrementBy extends Predis_MultiBulkCommand { public function getCommandId() { return 'DECRBY'; } } class Predis_Commands_Exists extends Predis_MultiBulkCommand { public function getCommandId() { return 'EXISTS'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_Delete extends Predis_MultiBulkCommand { public function getCommandId() { return 'DEL'; } } class Predis_Commands_Type extends Predis_MultiBulkCommand { public function getCommandId() { return 'TYPE'; } } class Predis_Commands_Append extends Predis_MultiBulkCommand { public function getCommandId() { return 'APPEND'; } } class Predis_Commands_Substr extends Predis_MultiBulkCommand { public function getCommandId() { return 'SUBSTR'; } } class Predis_Commands_Keys extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'KEYS'; } public function parseResponse($data) { if (is_array($data) || $data instanceof Iterator) { return $data; } return strlen($data) > 0 ? explode(' ', $data) : array(); } } class Predis_Commands_RandomKey extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'RANDOMKEY'; } public function parseResponse($data) { return $data !== '' ? $data : null; } } class Predis_Commands_Rename extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'RENAME'; } } class Predis_Commands_RenamePreserve extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'RENAMENX'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_Expire extends Predis_MultiBulkCommand { public function getCommandId() { return 'EXPIRE'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_ExpireAt extends Predis_MultiBulkCommand { public function getCommandId() { return 'EXPIREAT'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_DatabaseSize extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'DBSIZE'; } } class Predis_Commands_TimeToLive extends Predis_MultiBulkCommand { public function getCommandId() { return 'TTL'; } } class Predis_Commands_ListPushTail extends Predis_MultiBulkCommand { public function getCommandId() { return 'RPUSH'; } } class Predis_Commands_ListPushHead extends Predis_MultiBulkCommand { public function getCommandId() { return 'LPUSH'; } } class Predis_Commands_ListLength extends Predis_MultiBulkCommand { public function getCommandId() { return 'LLEN'; } } class Predis_Commands_ListRange extends Predis_MultiBulkCommand { public function getCommandId() { return 'LRANGE'; } } class Predis_Commands_ListTrim extends Predis_MultiBulkCommand { public function getCommandId() { return 'LTRIM'; } } class Predis_Commands_ListIndex extends Predis_MultiBulkCommand { public function getCommandId() { return 'LINDEX'; } } class Predis_Commands_ListSet extends Predis_MultiBulkCommand { public function getCommandId() { return 'LSET'; } } class Predis_Commands_ListRemove extends Predis_MultiBulkCommand { public function getCommandId() { return 'LREM'; } } class Predis_Commands_ListPopLastPushHead extends Predis_MultiBulkCommand { public function getCommandId() { return 'RPOPLPUSH'; } } class Predis_Commands_ListPopLastPushHeadBulk extends Predis_MultiBulkCommand { public function getCommandId() { return 'RPOPLPUSH'; } } class Predis_Commands_ListPopFirst extends Predis_MultiBulkCommand { public function getCommandId() { return 'LPOP'; } } class Predis_Commands_ListPopLast extends Predis_MultiBulkCommand { public function getCommandId() { return 'RPOP'; } } class Predis_Commands_ListPopFirstBlocking extends Predis_MultiBulkCommand { public function getCommandId() { return 'BLPOP'; } } class Predis_Commands_ListPopLastBlocking extends Predis_MultiBulkCommand { public function getCommandId() { return 'BRPOP'; } } class Predis_Commands_SetAdd extends Predis_MultiBulkCommand { public function getCommandId() { return 'SADD'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_SetRemove extends Predis_MultiBulkCommand { public function getCommandId() { return 'SREM'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_SetPop extends Predis_MultiBulkCommand { public function getCommandId() { return 'SPOP'; } } class Predis_Commands_SetMove extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SMOVE'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_SetCardinality extends Predis_MultiBulkCommand { public function getCommandId() { return 'SCARD'; } } class Predis_Commands_SetIsMember extends Predis_MultiBulkCommand { public function getCommandId() { return 'SISMEMBER'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_SetIntersection extends Predis_MultiBulkCommand { public function getCommandId() { return 'SINTER'; } } class Predis_Commands_SetIntersectionStore extends Predis_MultiBulkCommand { public function getCommandId() { return 'SINTERSTORE'; } } class Predis_Commands_SetUnion extends Predis_MultiBulkCommand { public function getCommandId() { return 'SUNION'; } } class Predis_Commands_SetUnionStore extends Predis_MultiBulkCommand { public function getCommandId() { return 'SUNIONSTORE'; } } class Predis_Commands_SetDifference extends Predis_MultiBulkCommand { public function getCommandId() { return 'SDIFF'; } } class Predis_Commands_SetDifferenceStore extends Predis_MultiBulkCommand { public function getCommandId() { return 'SDIFFSTORE'; } } class Predis_Commands_SetMembers extends Predis_MultiBulkCommand { public function getCommandId() { return 'SMEMBERS'; } } class Predis_Commands_SetRandomMember extends Predis_MultiBulkCommand { public function getCommandId() { return 'SRANDMEMBER'; } } class Predis_Commands_ZSetAdd extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZADD'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_ZSetIncrementBy extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZINCRBY'; } } class Predis_Commands_ZSetRemove extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZREM'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_ZSetUnionStore extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZUNIONSTORE'; } public function filterArguments(Array $arguments) { $options = array(); $argc = count($arguments); if ($argc > 1 && is_array($arguments[$argc - 1])) { $options = $this->prepareOptions(array_pop($arguments)); } $args = is_array($arguments[0]) ? $arguments[0] : $arguments; return array_merge($args, $options); } private function prepareOptions($options) { $opts = array_change_key_case($options, CASE_UPPER); $finalizedOpts = array(); if (isset($opts['WEIGHTS']) && is_array($opts['WEIGHTS'])) { $finalizedOpts[] = 'WEIGHTS'; foreach ($opts['WEIGHTS'] as $weight) { $finalizedOpts[] = $weight; } } if (isset($opts['AGGREGATE'])) { $finalizedOpts[] = 'AGGREGATE'; $finalizedOpts[] = $opts['AGGREGATE']; } return $finalizedOpts; } } class Predis_Commands_ZSetIntersectionStore extends Predis_Commands_ZSetUnionStore { public function getCommandId() { return 'ZINTERSTORE'; } } class Predis_Commands_ZSetRange extends Predis_MultiBulkCommand { private $_withScores = false; public function getCommandId() { return 'ZRANGE'; } public function filterArguments(Array $arguments) { if (count($arguments) === 4) { $lastType = gettype($arguments[3]); if ($lastType === 'string' && strtolower($arguments[3]) === 'withscores') { $arguments[3] = array('WITHSCORES' => true); $lastType = 'array'; } if ($lastType === 'array') { $options = $this->prepareOptions(array_pop($arguments)); return array_merge($arguments, $options); } } return $arguments; } protected function prepareOptions($options) { $opts = array_change_key_case($options, CASE_UPPER); $finalizedOpts = array(); if (isset($opts['WITHSCORES'])) { $finalizedOpts[] = 'WITHSCORES'; $this->_withScores = true; } return $finalizedOpts; } public function parseResponse($data) { if ($this->_withScores) { if ($data instanceof Iterator) { return new Predis_Shared_MultiBulkResponseKVIterator($data); } $result = array(); for ($i = 0; $i < count($data); $i++) { $result[] = array($data[$i], $data[++$i]); } return $result; } return $data; } } class Predis_Commands_ZSetReverseRange extends Predis_Commands_ZSetRange { public function getCommandId() { return 'ZREVRANGE'; } } class Predis_Commands_ZSetRangeByScore extends Predis_Commands_ZSetRange { public function getCommandId() { return 'ZRANGEBYSCORE'; } protected function prepareOptions($options) { $opts = array_change_key_case($options, CASE_UPPER); $finalizedOpts = array(); if (isset($opts['LIMIT']) && is_array($opts['LIMIT'])) { $limit = array_change_key_case($opts['LIMIT'], CASE_UPPER); $finalizedOpts[] = 'LIMIT'; $finalizedOpts[] = isset($limit['OFFSET']) ? $limit['OFFSET'] : $limit[0]; $finalizedOpts[] = isset($limit['COUNT']) ? $limit['COUNT'] : $limit[1]; } return array_merge($finalizedOpts, parent::prepareOptions($options)); } } class Predis_Commands_ZSetCount extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZCOUNT'; } } class Predis_Commands_ZSetCardinality extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZCARD'; } } class Predis_Commands_ZSetScore extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZSCORE'; } } class Predis_Commands_ZSetRemoveRangeByScore extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZREMRANGEBYSCORE'; } } class Predis_Commands_ZSetRank extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZRANK'; } } class Predis_Commands_ZSetReverseRank extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZREVRANK'; } } class Predis_Commands_ZSetRemoveRangeByRank extends Predis_MultiBulkCommand { public function getCommandId() { return 'ZREMRANGEBYRANK'; } } class Predis_Commands_HashSet extends Predis_MultiBulkCommand { public function getCommandId() { return 'HSET'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_HashSetPreserve extends Predis_MultiBulkCommand { public function getCommandId() { return 'HSETNX'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_HashSetMultiple extends Predis_MultiBulkCommand { public function getCommandId() { return 'HMSET'; } public function filterArguments(Array $arguments) { if (count($arguments) === 2 && is_array($arguments[1])) { $flattenedKVs = array($arguments[0]); $args = &$arguments[1]; foreach ($args as $k => $v) { $flattenedKVs[] = $k; $flattenedKVs[] = $v; } return $flattenedKVs; } return $arguments; } } class Predis_Commands_HashIncrementBy extends Predis_MultiBulkCommand { public function getCommandId() { return 'HINCRBY'; } } class Predis_Commands_HashGet extends Predis_MultiBulkCommand { public function getCommandId() { return 'HGET'; } } class Predis_Commands_HashGetMultiple extends Predis_MultiBulkCommand { public function getCommandId() { return 'HMGET'; } public function filterArguments(Array $arguments) { if (count($arguments) === 2 && is_array($arguments[1])) { $flattenedKVs = array($arguments[0]); $args = &$arguments[1]; foreach ($args as $v) { $flattenedKVs[] = $v; } return $flattenedKVs; } return $arguments; } } class Predis_Commands_HashDelete extends Predis_MultiBulkCommand { public function getCommandId() { return 'HDEL'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_HashExists extends Predis_MultiBulkCommand { public function getCommandId() { return 'HEXISTS'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_HashLength extends Predis_MultiBulkCommand { public function getCommandId() { return 'HLEN'; } } class Predis_Commands_HashKeys extends Predis_MultiBulkCommand { public function getCommandId() { return 'HKEYS'; } } class Predis_Commands_HashValues extends Predis_MultiBulkCommand { public function getCommandId() { return 'HVALS'; } } class Predis_Commands_HashGetAll extends Predis_MultiBulkCommand { public function getCommandId() { return 'HGETALL'; } public function parseResponse($data) { if ($data instanceof Iterator) { return new Predis_Shared_MultiBulkResponseKVIterator($data); } $result = array(); for ($i = 0; $i < count($data); $i++) { $result[$data[$i]] = $data[++$i]; } return $result; } } class Predis_Commands_SelectDatabase extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SELECT'; } } class Predis_Commands_MoveKey extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'MOVE'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_FlushDatabase extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'FLUSHDB'; } } class Predis_Commands_FlushAll extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'FLUSHALL'; } } class Predis_Commands_Sort extends Predis_MultiBulkCommand { public function getCommandId() { return 'SORT'; } public function filterArguments(Array $arguments) { if (count($arguments) === 1) { return $arguments; } $query = array($arguments[0]); $sortParams = $arguments[1]; if (isset($sortParams['by'])) { $query[] = 'BY'; $query[] = $sortParams['by']; } if (isset($sortParams['get'])) { $getargs = $sortParams['get']; if (is_array($getargs)) { foreach ($getargs as $getarg) { $query[] = 'GET'; $query[] = $getarg; } } else { $query[] = 'GET'; $query[] = $getargs; } } if (isset($sortParams['limit']) && is_array($sortParams['limit'])) { $query[] = 'LIMIT'; $query[] = $sortParams['limit'][0]; $query[] = $sortParams['limit'][1]; } if (isset($sortParams['sort'])) { $query[] = strtoupper($sortParams['sort']); } if (isset($sortParams['alpha']) && $sortParams['alpha'] == true) { $query[] = 'ALPHA'; } if (isset($sortParams['store']) && $sortParams['store'] == true) { $query[] = 'STORE'; $query[] = $sortParams['store']; } return $query; } } class Predis_Commands_Multi extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'MULTI'; } } class Predis_Commands_Exec extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'EXEC'; } } class Predis_Commands_Discard extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'DISCARD'; } } class Predis_Commands_Subscribe extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SUBSCRIBE'; } } class Predis_Commands_Unsubscribe extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'UNSUBSCRIBE'; } } class Predis_Commands_SubscribeByPattern extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'PSUBSCRIBE'; } } class Predis_Commands_UnsubscribeByPattern extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'PUNSUBSCRIBE'; } } class Predis_Commands_Publish extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'PUBLISH'; } } class Predis_Commands_Watch extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'WATCH'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_Unwatch extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'UNWATCH'; } public function parseResponse($data) { return (bool) $data; } } class Predis_Commands_Save extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SAVE'; } } class Predis_Commands_BackgroundSave extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'BGSAVE'; } public function parseResponse($data) { if ($data == 'Background saving started') { return true; } return $data; } } class Predis_Commands_BackgroundRewriteAppendOnlyFile extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'BGREWRITEAOF'; } public function parseResponse($data) { return $data == 'Background append only file rewriting started'; } } class Predis_Commands_LastSave extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'LASTSAVE'; } } class Predis_Commands_Shutdown extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SHUTDOWN'; } public function closesConnection() { return true; } } class Predis_Commands_Info extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'INFO'; } public function parseResponse($data) { $info = array(); $infoLines = explode("\r\n", $data, -1); foreach ($infoLines as $row) { list($k, $v) = explode(':', $row); if (!preg_match('/^db\d+$/', $k)) { $info[$k] = $v; } else { $db = array(); foreach (explode(',', $v) as $dbvar) { list($dbvk, $dbvv) = explode('=', $dbvar); $db[trim($dbvk)] = $dbvv; } $info[$k] = $db; } } return $info; } } class Predis_Commands_SlaveOf extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'SLAVEOF'; } public function filterArguments(Array $arguments) { if (count($arguments) === 0 || $arguments[0] === 'NO ONE') { return array('NO', 'ONE'); } return $arguments; } } class Predis_Commands_Config extends Predis_MultiBulkCommand { public function canBeHashed() { return false; } public function getCommandId() { return 'CONFIG'; } } class Queue { private $cfg_name; private $cfg_key; private $q_name; private $real_q_name; private $redis; private $connected=false; private $host; private $port; public function __construct($cfg_name='', $q_name='') { if (empty($cfg_name)) { halt(__FUNCTION__.': 没有指定cfg_name！'); } if (empty($q_name)) { halt(__FUNCTION__.': 没有指定队列名称！'); } $key = 'core_queue_name_'.$cfg_name; $this->cfg_name = $cfg_name; $this->cfg_key = $key; $this->q_name = $q_name; $this->real_q_name = $this->cfg_name . '-' . $this->q_name; $qname_list = C($key); if (!$qname_list) { $filename = CONFIG_PATH.'queue/'.$cfg_name.'.queue.php'; if (!is_file($filename)) { halt('cfg_name:'.$cfg_name.' is invalid, queue config file:'.$filename.' is not found'); } $qname_list = include $filename; if (!is_array($qname_list)) { halt('return value is not an array in queue config file:'.$filename); } C(array($key=>$qname_list)); } if (!isset($qname_list[$q_name])) { halt('队列名称['.$q_name.']在配置文件: '.$filename.'里没有定义!'); } $queue_list = C('core_queue_list'); if (!isset($queue_list[$qname_list[$q_name]])) { halt(__FUNCTION__.': 队列名称['.$q_name.']定义的队列服务器: '.$qname_list[$q_name].'没有在queue.inc.php里定义'); } $this->host = $queue_list[$qname_list[$q_name]][0]; $this->port = $queue_list[$qname_list[$q_name]][1]; } public function __destruct() { $this->disconnect(); } public function connect($persistent=false, $database=15) { $host = array( 'host' => $this->host, 'port' => $this->port, 'database' => $database, ); if (!isset($host['database'])) $host['database'] = $database; $host['connection_persistent'] = $persistent; try { $this->redis = new Predis_Client($host); $this->connected = true; } catch(Exception $ex) { $this->connected = false; throw_exception('redis 队列服务连接失败'); } } public function disconnect() { if (is_object($this->redis)) { $this->connected = false; $this->redis->disconnect(); } } public function put($data) { $this->connect(); $ret = $this->redis->lpush($this->real_q_name, $data); $this->disconnect(); if ($ret) return true; else return false; } public function append($data) { $this->connect(); $ret = $this->redis->rpush($this->real_q_name, $data); $this->disconnect(); if ($ret) return true; else return false; } public function get() { $this->connect(); $ret = $this->redis->rpop($this->real_q_name); $this->disconnect(); if (is_null($ret)) return 'HTTPSQS_GET_END'; return $ret; } public function status() { $this->connect(); $ret = $this->redis->info(); $this->disconnect(); return $ret; } public function pput($data) { $this->connect(true); $ret = $this->redis->lpush($this->real_q_name, $data); if ($ret) return true; else return false; } public function pappend($data) { $this->connect(true); $ret = $this->redis->rpush($this->real_q_name, $data); if ($ret) return true; else return false; } public function pget() { $this->connect(true); $ret = $this->redis->rpop($this->real_q_name); if (is_null($ret)) return 'HTTPSQS_GET_END'; return $ret; } public function pstatus() { $this->connect(true); return $this->redis->info(); } } function get_view($view_name) { return get_app_root().'/views/'.$view_name.'.view.php'; } function echo_css($css_name='') { echo '<link rel="stylesheet" href="'.C('CSS_DOMAIN').'/'.$css_name.'?'.C('VERSION_CSS').'">'."\n"; } function echo_static($type,$dir_name){ switch($type){ case 'css': echo '<link rel="stylesheet" href="'.C('STATIC_DOMAIN').'/'.$dir_name.'?'.C('VERSION_CSS').'">'."\n";break; case 'js': echo '<script src="'.C('STATIC_DOMAIN').'/'.$dir_name.'?'.C('VERSION_JS').'"></script>'."\n";break; } } function get_css($css_name='') { return C('CSS_DOMAIN').'/'.$css_name.'?'.C('VERSION_CSS'); } function echo_js($js_name='') { echo '<script src="'.C('JS_DOMAIN').'/'.$js_name.'?'.C('VERSION_JS').'"></script>'."\n"; } function get_js($js_name='') { return C('JS_DOMAIN').'/'.$js_name.'?'.C('VERSION_JS'); } function get_img($img_name='') { echo C('IMG_DOMAIN').'/'.$img_name.'?'.C('VERSION_IMG'); } function statics_code() { echo '<div style="display:none;"><script src="http://s23.cnzz.com/stat.php?id=3447923&web_id=3447923" language="JavaScript"></script></div>'; } function do_cache($op, $type, $k, $v='', $cfg_name='') { static $cache_list=array(); if (empty($cfg_name)) $cfg_name = get_app_name(); $cache = new Cache($cfg_name); if ($op === 'get') { $ret = $cache->get($type, $k); if (($ret === false) || ($ret === '')) return false; return $ret; } elseif ($op === 'set') { return $cache->set($type, $k, $v); } elseif ($op === 'delete') { return $cache->delete($type, $k); }elseif($op === 'add'){ return $cache->add($type, $k,$v); } else { halt(__FUNCTION__.': 非法缓存操作类型:'.$op.'!'); } } function do_queue($q_name='', $op, $data='', $where='', $cfg_name='', $alias='', $hash_key='') { static $queue_list=array(); if (empty($cfg_name)) $cfg_name = get_app_name(); if (!in_array($op, array('add', 'update', 'delete'))) { halt(__FUNCTION__.': 非法队列操作类型!'); } if (!isset($queue_list[$cfg_name.'__'.$q_name])) { $queue_list[$cfg_name.'__'.$q_name] = new Queue($cfg_name, $q_name); } $queue = $queue_list[$cfg_name.'__'.$q_name]; $str = array( 'op'=>$op, ); if (!empty($data)) $str['data'] = $data; if (!empty($where)) $str['where'] = $where; if (!empty($alias)) $str['alias'] = $alias; if (!empty($hash_key)) $str['hash_key'] = $hash_key; $str = json_encode($str); try { $ret = $queue->put($str); if ($ret === true) return true; return false; } catch (Exception $ex) { return false; } } function get_lingchen_stamp() { return strtotime(date('Y-m-d', time())); } function gstr($name) { if (isset($_GET[$name])) return $_GET[$name]; return ''; } function gint($name) { if (isset($_GET[$name])) { return is_numeric($_GET[$name]) ? intval($_GET[$name]) : false; } return 0; } function gfloat($name) { if (isset($_GET[$name])) return floatval($_GET[$name]); return 0; } function pstr($name) { if (isset($_POST[$name])) return $_POST[$name]; return ''; } function pint($name) { if (isset($_POST[$name]) && is_numeric($_POST[$name])) return intval($_POST[$name]); return 0; } function pfloat($name) { if (isset($_POST[$name])) return floatval($_POST[$name]); return 0; } function parse_insert_data_list($data_list) { if (!is_array($data_list)) return ''; if (count($data_list) < 1) return ''; $keys = array_keys($data_list[0]); $key_ary = array(); foreach ($keys as $key) { $key_ary[] = "`".$key."`"; } $sql = " (".implode(",", $key_ary).") VALUES "; $v_list = array(); foreach ($data_list as $data) { $v_ary = array(); foreach ($keys as $key) { $v_ary[] = "'".$data[$key]."'"; } $v_list[] = "(".implode(",", $v_ary).")"; } $sql .= implode(",", $v_list); return $sql; } function parse_data($data){ if (!is_array($data)) return ''; $ret = array(); foreach ($data as $k=>$v) { if (is_array($v)) { if (count($v) < 2) { trigger_error(__FUNCTION__.'非法的parse_data: '.var_export($data, true), E_USER_ERROR); } $v[1] = strtolower($v[1]); if (!in_array($v[1], array('add'))) { trigger_error(__FUNCTION__.'非法的parse_data: '.var_export($data, true).'，目前只支持add', E_USER_ERROR); } $v[0] = intval($v[0]); if ($v[0] < 0) { $ret[] = '`'.$k.'`=`'.$k.'`'.$v[0]; } else { $ret[] = '`'.$k.'`=`'.$k.'`+'.$v[0]; } } else { $ret[] = '`'.$k.'`=\''.$v.'\''; } } return implode(',', $ret); } function parse_where($where) { if (!is_array($where)) return ''; if (count($where) < 1) return ''; $ret = array(); foreach ($where as $k=>$v) { if (is_array($v)) { if (count($v) >= 3) $k = $v[2]; if (($v[1] == 'in') && is_array($v[0])) { foreach ($v[0] as $m=>$n) { $v[0][$m] = "'".$n."'"; } $ret[] = '`'.$k.'` '.$v[1].' ('.implode(',', $v[0]).')'; } else { $ret[] = '`'.$k.'`'.$v[1].'\''.$v[0].'\''; } } else { $ret[] = '`'.$k.'`=\''.$v.'\''; } } return ' WHERE '. implode(' AND ', $ret); } function lunar_date($t) { require_once CORE_ROOT.'/include/class.lunar.php'; if (empty($t)) $t = time(); $l = new Lunar(); $y = date("Y", $t); $m = date("m", $t); $d = date("d", $t); $res = $l->cal($y, $m, $d); return $y.'年'.$m.'月'.$d.'日 '.$res ["week"].' | 农历 '.$res["month"].$res["day"]; } function random_password() { $len = mt_rand(6,10); $src = array(0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,m,n,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z); $pass = ''; for ($i=0; $i < $len; $i++) { $pass .= $src[mt_rand(0, count($src)-1)]; } return $pass; } function page($totalPage, $currentPage, $url, $halfPer=10) { $currentPage = $currentPage < 1 ? 1 : $currentPage; $re = "<li><a href=\"$url=1\"><i class=\" icon-double-angle-left\"></i></a></li>\n<li><a href=\"$url=".($currentPage==1?1:$currentPage-1)."\"><i class=\"icon-angle-left\"></i></a></li>\n"; for ($i=$currentPage - $halfPer,$i > 1 || $i = 1, $j = $currentPage + $halfPer, $j < $totalPage || $j = $totalPage;$i <= $j ;$i++) { $re .= "<li><a".(($i == $currentPage)?" style=\"background-color:#03a9f5\"":"")." href=\"{$url}={$i}\">{$i}</a></li>\n"; } $re .= "<li><a href=\"$url=".($currentPage>=$totalPage?$currentPage:$currentPage+1)."\"><i class=\"icon-angle-right\"></i></a></li>\n<li><a href=\"$url=".$totalPage."\"><i class=\" icon-double-angle-right\"></i></a></li>\n"; if($totalPage>1) { $re="<ul class=\"pagination pagination-sm\">{$re}</ul>"; return $re; } return ''; } function echo_result($code, $msg='', $data='') { $callback = gstr('callback'); $res = make_result($code, $msg, $data); if (isset($_GET['debug'])) { dump($res); } else { if ($callback) { echo $callback.'('.json_encode($res).')'; } else { echo json_encode($res); } } exit; } function make_result($code, $msg, $data='') { $ret = array ( 'code' => intval($code), 'msg' => strval($msg), 'data' => $data ); return $ret; } function get_xingzuo($year=0, $month=0, $day=0) { $month = $month; $date = $day; if ($day < 1) return false; $ret = false; if (($month == 1 && $date >= 20) || ($month == 2 && $date <= 18)) { $ret = array(1, "水瓶座");} if ($month == 1 && $date > 31) { $ret = false;} if (($month == 2 && $date >= 19) || ($month == 3 && $date <= 20)) { $ret = array(2, "双鱼座");} if ($month == 2 && $date > 29) { $ret = false;} if (($month == 3 && $date >= 21) || ($month == 4 && $date <= 19)) { $ret = array(3, "白羊座");} if ($month == 3 && $date > 31) { $ret = false;} if (($month == 4 && $date >= 20) || ($month == 5 && $date <= 20)) { $ret = array(4, "金牛座");} if ($month == 4 && $date > 30) { $ret = false;} if (($month == 5 && $date >= 21) || ($month == 6 && $date <= 21)) { $ret = array(5, "双子座");} if ($month == 5 && $date > 31) { $ret = false;} if (($month == 6 && $date >= 22) || ($month == 7 && $date <= 22)) { $ret = array(6, "巨蟹座");} if ($month == 6 && $date > 30) { $ret = false;} if (($month == 7 && $date >= 23) || ($month == 8 && $date <= 22)) { $ret = array(7, "狮子座");} if ($month == 7 && $date > 31) { $ret = false;} if (($month == 8 && $date >= 23) || ($month == 9 && $date <= 22)) { $ret = array(8, "处女座");} if ($month == 8 && $date > 31) { $ret = false;} if (($month == 9 && $date >= 23) || ($month == 10 && $date <= 22)) { $ret = array(9, "天秤座");} if ($month == 9 && $date > 30) { $ret = false;} if (($month == 10 && $date >= 23) || ($month == 11 && $date <= 21)) { $ret = array(10, "天蝎座");} if ($month == 10 && $date > 31) { $ret = false;} if (($month == 11 && $date >= 22) || ($month == 12 && $date <= 21)) { $ret = array(11, "射手座");} if ($month == 11 && $date > 30) { $ret = false;} if (($month == 12 && $date >= 22) || ($month == 1 && $date <= 19)) { $ret = array(12, "摩羯座");} if ($month == 12 && $date > 31) { $ret = false;} return $ret; } function curl_page($url, $post=0, $postdata='', $connect_timeout=3, $timeout=3) { $a = microtime(true); if (is_array($postdata)) $postdata = _make_curl_posts($postdata); $user_agent ="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"; $ch = curl_init($url); curl_setopt ($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); if (preg_match('/^https/', $url)) { curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); } curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $connect_timeout); curl_setopt ($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($ch, CURLOPT_USERAGENT, $user_agent); curl_setopt ($ch, CURLOPT_REFERER, $url); if ($post) { curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata); } $ret = curl_exec($ch); $header = curl_getinfo($ch); $http_code = isset($header['http_code']) ? $header['http_code'] : 200; $error = ''; if ($http_code != 200) { $error = curl_error($ch); } curl_close ($ch); $b = microtime(true); $exec_time = $b-$a; if ($exec_time > 1.0) { $header_str = 'total_time:'.$header['total_time'].',namelookup_time:'.$header['namelookup_time'].',connect_time'.$header['connect_time'].',pretransfter_time:'.$header['pretransfer_time']; } if (empty($ret) || ($http_code == 201)) { return false; } return $ret; } function _make_curl_posts($posts) { if (!is_array($posts)) $posts = array(); $tmp = array(); foreach ($posts as $k=>$v) { $tmp[] = $k.'='.urlencode($v); } return implode('&', $tmp); } function get_page_url() { return 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']; } function get_qq_face($str){ $str = str_replace(">",'<；',$str); $str = str_replace(">",'>；',$str); $str = str_replace("\n",'>；br/>；',$str); $str = preg_replace("[\[em_([0-9]*)\]]","<img src=\"".STATIC_SITE_BBS."/images/faces/$1.gif\" />",$str); return $str; } function get_date_str($rt){ $time = time(); $poor = ceil(($time-$rt)/3600); if($poor < 24){ $hour_time = $poor.'小时之内'; }else if($poor > 24 && $poor < 48){ $hour_time = '1天前'; }else if($poor > 48 && $poor < 240){ $hour_time = '几天前'; }else if($poor > 240){ $hour_time = '很久以前'; } return $hour_time; } function ap_generate_appkey($appid) { $key_list = array(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,0,1,2,3,4,5,6,7,8,9,10); $res = array(); $c = count($key_list)-1; for ($i=0; $i < 4; $i++) { $str = ''; for ($m=0; $m < 5; $m++) { $str .= $key_list[mt_rand(0, $c)]; } $res[] = $str; } $res[] = substr(strtoupper(md5($appid)), 0, 5); return implode('-', $res); } function ap_strval($str) { return (null === $str) ? '' : strval($str); } function ap_user_icon_url($icon) { if (empty($icon)) $icon = 'user/icon.png'; $pinfo = pathinfo($icon); $prefix = (false === strpos($icon, 'http')) ? C('UPLOAD_DOMAIN').'/' : ''; return array( 'icon' => $prefix.$icon, 'iconraw' => $prefix.$pinfo['dirname'].'/'.$pinfo['filename'].'_big'.'.'.$pinfo['extension'], ); } $core_cfg = array ( 'version_js' => '20150905', 'version_css' => '20150905', 'version_img' => '20150916', 'autoid_user' => 100, 'autoid_msg' => 102, 'autoid_msg_detail' => 103, 'autoid_wxuser' => 104, 'autoid_qquser' => 105, 'autoid_wbuser' => 114, 'autoid_clientlogin' => 106, 'autoid_scene' => 107, 'autoid_scene_page' => 108, 'autoid_img' => 109, 'autoid_img_category' => 110, 'autoid_music' => 111, 'autoid_music_category' => 112, 'autoid_bbsreport' => 113, 'autoid_a_act' => 600, 'autoid_a_act_log' => 601, 'autoid_a_prize' => 602, 'autoid_a_class' => 603, 'autoid_a_tpl' => 604, 'autoid_admin' => 900, 'autoid_admin_group' => 901, 'autoid_admin_menu' => 902, 'autoid_pic' => 903, 'autoid_piclib' => 916, 'autoid_pic_category' => 904, 'autoid_pic_material' => 905, 'autoid_pic_app_nav' => 906, 'autoid_app' => 907, 'autoid_app_tpl_category' => 914, 'autoid_department' => 908, 'autoid_appnav' => 909, 'autoid_iconfont' => 910, 'autoid_apploading' => 911, 'autoid_tpl' => 912, 'autoid_tpl_category' => 915, 'autoid_app_page' => 913, 'autoid_m_article' => 801, 'autoid_m_article_category' => 802, 'autoid_m_msg' => 804, 'autoid_m_msg_notify' => 805, 'autoid_m_msg_sys' => 806, 'autoid_m_user' => 808, 'autoid_m_wxuser' => 810, 'autoid_m_qquser' => 814, 'autoid_m_wbuser' => 815, 'autoid_m_expose' => 809, 'autoid_m_form' => 811, 'autoid_m_form_res' => 812, 'autoid_m_address' => 813, 'autoid_m_teamwar' => 816, 'autoid_post' => 2001, 'autoid_reply' => 2002, 'autoid_zan' => 2006, 'autoid_fav' => 2007, 'autoid_bbs_home' => 2010, 'autoid_ipost' => 2004, 'autoid_upost' => 2005, 'autoid_class' => 2009, 'target_type' => 1, 'autoid_shop_activity' => 301, 'autoid_shop_activity_num' => 302, 'autoid_shop_activity_user' => 312, 'autoid_shop_goods' => 303, 'autoid_shop_goods_attr' => 304, 'autoid_shop_goods_type' => 305, 'autoid_shop_hot_goods' => 306, 'autoid_shop_lucky_num' => 307, 'autoid_shop_operate_activity' => 308, 'autoid_shop_show' => 309, 'autoid_shop_type_attr' => 310, 'autoid_m_rebate' => 311, 'autoid_shop_teamgoods' => 313, 'autoid_filename' => 9999, 'site_domain' => 'http://www.g.com/apps/admin/www', 'static_domain' => 'http://www.g.com/apps/admin/static', 'css_domain' => 'http://www.g.com/apps/admin/static/css', 'js_domain' => 'http://www.g.com/apps/admin/static/js', 'img_domain' => 'http://www.g.com/apps/admin/static/images', 'api_domain' => 'http://www.g.com/apps/api/www/', 'data_domain' => 'http://www.g.com/apps/admin/static/data', 'editor_domain' => 'http://www.g.com/apps/admin/static/editor', 'upload_domain' => 'http://www.g.com/uploads/', 'qr_domain' => '', 'cookie_prefix' => 'l_', 'cookie_expire' => '', 'cookie_domain' => '.www.g.com', 'cookie_path' => '/', 'cookie_key' => 'daysgogogo', 'app_exception_file' => 'D:\\17gou/core/include/exception.view.php', 'app_trace_file' => 'D:\\17gou/core/include/trace.view.php', 'log_record' => false, 'log_record_size' => 67108864, 'log_record_level' => 'EMERG,ALERT,CRIT,ERR', 'show_error_msg' => true, 'error_page' => '', 'error_message' => '你浏览的页面暂时发生了错误！请稍后再试～', 'core_cache_list' => array ( 'user_cs' => array ( 0 => '127.0.0.1', 1 => 11211, ), 'pic_cs' => array ( 0 => '127.0.0.1', 1 => 11211, ), ), 'core_queue_list' => array ( 'user_qs' => array ( 0 => 'q1.queue.bightml5.com', 1 => 7131, ), 'home_qs' => array ( 0 => 'q1.queue.bightml5.com', 1 => 7131, ), ), );C($core_cfg);